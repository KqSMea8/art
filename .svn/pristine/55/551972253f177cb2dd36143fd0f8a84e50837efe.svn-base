<?php

namespace Admin\Controller;


use Common\Base\AdminBaseController;
use Admin\Logic\ArticleLogic;
use Admin\Logic\ArticleLikeLogic;
use Custom\Helper\Nav;
use Common\Logic\UserLogic;
use Custom\Helper\Oss;
use Common\Logic\AgencyLogic;
use Custom\Helper\Util;
use Custom\Define\Code;
use Common\Logic\MessageLogic;
use Custom\Define\Image;

use Mp\Model\ArtworkModel;
use Mp\Model\ArtworkCategoryModel;
use Mp\Logic\ArtworkLogic;
use Mp\Logic\ArtworkUpdateLogic;
use Mp\Logic\ArtCircleLogic;
use Mp\Logic\ArtCircleShareLogic;

class ArticleController extends AdminBaseController
{
    public $pagesize = 15;  //每页显示条数

   
    public function index()
    {
        $nickname = I('get.nickname');
        $content = I('get.content');
        $title = I('get.title');
        $sdate = I('get.sdate');  //注册开始时间
        $edate = I('get.edate');  //注册结束时间
        $rviews_sort = I('get.rviews_sort');//真实浏览量排序
        $collect_status=I('get.collect_status');
        $page = I('get.page', '1');  //页码
        $ArticleLogic = new ArticleLogic();

        $Article_wait_publish=$ArticleLogic->field("count(*) as counts")->where("status=2 and collect_wait_publish=1 and is_collect=1")->find();

        //$encInfo = Util::encryptPassword('gw4KHJKpo5f*Irt', '543gOg4g');
        //print_r($encInfo);
        // exit;

        $where = "status in (1,2)";
        $order = 'az_article.id DESC';
        if (trim($nickname) != '') {
            $where = $where . " and az_user.nickname like '%" . addslashes(trim($nickname)) . "%'";
        }
        if (trim($title) != '') {
            $where = $where . " and az_article.title like '%" . addslashes(trim($title)) . "%'";
        }
        if (trim($content) != '') {
            $where = $where . " and az_article.content like '%" . addslashes(trim($content)) . "%'";
        }
        if ($this->checkDateFormat($sdate)) {
            if(strtotime($sdate)){
                $where = $where . " and az_article.publish_time>=" . strtotime($sdate);
            }
        }
        if ($this->checkDateFormat($edate)) {
            if(strtotime($edate)){
                $edate_time = strtotime($edate) + 86400;
                $where = $where . " and az_article.publish_time<=" . $edate_time;
            }
        }

        if ($collect_status==1) {
            $where = $where . " and az_article.is_collect=1 " ;
        }

        if ($collect_status==2) {
            $where = $where . " and az_article.is_collect=1 and az_article.collect_wait_publish=1 and az_article.status=2 " ;
        }

        if ($rviews_sort==1) {
            $order = 'az_article.real_views ASC';
        }

        if ($rviews_sort==2) {
            $order = 'az_article.real_views DESC';
        }

        $ArticleTotal = $ArticleLogic
            ->join('az_user on az_user.id=az_article.artist','left')
            ->where($where)->count();
//echo $ArticleLogic->getLastSql();
        $lists = $ArticleLogic
            ->field('az_article.comment_count,az_article.like_count,az_article.real_views,az_article.views,az_article.is_collect,az_article.collect_wait_publish,az_article.id,az_article.title,az_article.artist,az_user.nickname,az_article.create_time,az_article.status,import_uniqid')
            ->join('az_user on az_user.id=az_article.artist','left')
            ->where($where)
            ->order($order)
            ->page($page, $this->pagesize)
            ->select();


        $nav = Nav::render(U('Admin/Article/index'), ['nickname' => $nickname, 'title' => $title, 'content' => $content, 'sdate' => $sdate, 'edate' => $edate,'collect_status'=>$collect_status,'rviews_sort'=>$rviews_sort], $page, $this->pagesize, $ArticleTotal);

        $this->assign('nav', $nav);
        $this->assign('Article_wait_publish', $Article_wait_publish);

        $this->assign('lists', $lists);

        $this->display();
    }

    //编辑页面显示
    public function showEdit()
    {
        $id = intval(I('get.id'));
        $ArticleLogic = new ArticleLogic();
        $data = $ArticleLogic->find($id);
        $tag_names=$ArticleLogic->get_tag_names($data['tag']);
        
        $this->assign('tag_names', $tag_names);
        $this->assign('data', $data);
        $this->display('edit');
    }

    //编辑操作
    public function edit()
    {
        $id = intval(I('post.id'));  //ID
        $title = trim(I('post.title',''));  //标题
        $tag = trim(I('post.tag',''));  //tag
        $cover = trim(I('post.cover',''));  //封面
        $artist = intval(I('post.artist'));  //用户ID
        $content = trim(I('post.content',''));  //内容
        $excerpt = trim(I('post.excerpt'));
        $publish_time=trim(I('post.publish_time'));
        $status = intval(I('post.status'));  //状态
        $collect_wait_publish = intval(I('post.collect_wait_publish'));
        $ArticleLogic = new ArticleLogic();
        $messageLogic = new MessageLogic();
        $tag_ids=$ArticleLogic->get_tag_ids($tag);

       

        $data = [
            'title' => $title,
            'tag'=>$tag_ids,
            'artist' => $artist,
            'cover' => $cover,
            'content' => $content,
            'excerpt' => $excerpt,
            'publish_time' => strtotime($publish_time),
            'collect_wait_publish' => $collect_wait_publish,
            'status' => $status,
        ];
        $where['id'] = $id;
        $aticleInfo = $ArticleLogic->where($where)->find();
        if(1 == $status && !empty($aticleInfo) && 0 == $aticleInfo['publish_time'] ){
            if($publish_time=='')$data['publish_time'] = time();
        }
        $result = $ArticleLogic->where($where)->save($data);  //更新记录

        if($result==0){
            $response = ['error' => 1, 'message' => '内容可能没有修改，更新失败'];
            echo json_encode($response);
        }else {
            if ( $status == 0) {
                //发送消息
                $title = trim($aticleInfo['title']);
                if (preg_match("/《(.*)》/", $title)) {
                    $title = ' ' . $title . ' ';//trim($artwork_name,'《》');
                } else {
                    $title = '《' . $title . '》';
                }
                $msg = $messageLogic
                    ->where(['content' => '您的文章' . $title . '由于“被人举报”而被删除。', 'to_user_id' => $aticleInfo['artist'], 'from_user_id' => -1])
                    ->find();
                if (!$msg) {
                    $messageLogic->sendSysMessage($aticleInfo['artist'], '您的文章' . $title . '由于“被人举报”而被删除。');
                }

            }
            $response = ['error' => 0, 'message' => 'OK'];
            echo json_encode($response);
        }
    }

    public function dele()
    {
        $ids = I('post.id');
        $messageLogic = new MessageLogic();
        if (!is_array($ids)) {//单个id转化成数组
            $ids = [$ids];
        }
        $num = 0;
        foreach ($ids as $key => $id) {
            $id = intval($id);
            if ($id <= 0) continue;
            $ArticleLogic = new ArticleLogic();
            $condition['where'] = 'id=' . intval($id);
            $ArticleLogic->save(['status' => 0], $condition);

            $ArticleLikeLogic = new ArticleLikeLogic();
            $condition['where'] = 'article_id=' . intval($id);
            $ArticleLikeLogic->save(['is_like' => 0], $condition);

            //发送消息
            $article=$ArticleLogic->find($id);
            $title=trim($article['title']);
            if(preg_match("/《(.*)》/",$title)){
                $title = ' ' .$title. ' ';//trim($artwork_name,'《》');
            }else{
                $title = '《' .$title. '》';
            }
            $msg=$messageLogic
                ->where(['content'=>'您的文章'.$title.'由于“被人举报”而被删除。','to_user_id'=>$article['artist'],'from_user_id'=>-1])
                ->find();
            if(!$msg){
                $messageLogic->sendSysMessage($article['artist'],'您的文章'.$title.'由于“被人举报”而被删除。');
            }

        }

        $return = ['error' => 0, 'msg' => $id];
        echo json_encode($return);
        return;
    }

    public function dustbin()
    {

        $nickname = I('get.nickname');
        $content = I('get.content');
        $sdate = I('get.sdate');  //注册开始时间
        $edate = I('get.edate');  //注册结束时间

        $page = I('get.page', '1');  //页码
        $ArticleLogic = new ArticleLogic();

        //$encInfo = Util::encryptPassword('gw4KHJKpo5f*Irt', '543gOg4g');
        //print_r($encInfo);
        // exit;

        $where = "1=1 ";
        $where = "status=0";
        if (trim($nickname) != '') {
            $where = $where . " and az_user.nickname like '%" . addslashes(trim($nickname)) . "%'";
        }
        if (trim($content) != '') {
            $where = $where . " and az_article.content like '%" . addslashes(trim($content)) . "%'";
        }
        if ($this->checkDateFormat($sdate)) {
            if(strtotime($sdate)){
                $where = $where . " and az_article.create_time>=" . strtotime($sdate);
            }
        }
        if ($this->checkDateFormat($edate)) {
            if(strtotime($edate)){
                $edate_time = strtotime($edate) + 86400;
                $where = $where . " and az_article.create_time<=" . $edate_time;
            }
        }

        $ArticleTotal = $ArticleLogic
            ->join('az_user on az_user.id=az_article.artist')
            ->where($where)->count();
//echo $ArticleLogic->getLastSql();
        $lists = $ArticleLogic
            ->field('az_article.id,az_article.title,az_article.artist,az_user.nickname,az_article.create_time,az_article.status')
            ->join('az_user on az_user.id=az_article.artist')
            ->where($where)
            ->order('az_article.id DESC')
            ->page($page, $this->pagesize)
            ->select();


        $nav = Nav::render(U('Admin/Article/dustbin'), ['nickname' => $nickname, 'content' => $content, 'sdate' => $sdate, 'edate' => $edate], $page, $this->pagesize, $ArticleTotal);

        $this->assign('nav', $nav);
        $this->assign('lists', $lists);

        $this->display();
    }

    protected function checkDateFormat($date)
    {
        if (preg_match("/^([0-9]{4})-([0-9]{2})-([0-9]{2})$/", $date, $parts)) {
            if (checkdate($parts[2], $parts[3], $parts[1])) {
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

    //编辑器上传图片
    public function uploadpic()
    {
        //sleep(2);
        if ($_FILES['image']['error'] != 4) {
            $imgbuff = file_get_contents($_FILES['image']['tmp_name']);
            $result = Oss::upload($imgbuff, 'png');
            $cover = $result['info']['url'];
        }
        echo "<script>top.$('.mce-btn.mce-open').parent().find('.mce-textbox').val('".$cover."').closest('.mce-window').find('.mce-primary').click();</script>";
    }

    //编辑器上传视频
    public function uploadvideo()
    {
        if ($_FILES['image']['error'] != 4) {
            $imgbuff = file_get_contents($_FILES['image']['tmp_name']);
            $result = Oss::upload($imgbuff, 'MP4');
            $cover = $result['info']['url'];
        }
        echo "<script>top.$('.mce-btn.mce-open').parent().find('.mce-textbox').val('".$cover."').closest('.mce-window').find('.mce-primary').click();</script>";
    }

    //艺术号标签
    public function tag()
    {
        $page = I('get.page', '1');  //页码
        $tags = M('article_tag')->order("sort asc")->page($page,$this->pagesize)->select();
        $total = M('article_tag')->count();
        foreach($tags as $k=>$v){
            $tags[$k]['type']=$v['type']==1?'配置':'用户自定义';
        }

        $nav = Nav::render(U('Admin/Article/tag'), [], $page, $this->pagesize, $total);

        $this->assign('nav', $nav);
        $this->assign('lists', $tags);
        $this->assign('page', $page);
        $this->display();
    }

    //添加艺术号标签
    public function addTag()
    {
        $sort = intval(trim(I('post.sort')));  //序
        $name = addslashes(trim(I('post.name')));  //名称
        if(empty($name)){
            $response = ['error' => 1, 'message' => '标签名称不能为空!'];
            echo json_encode($response);
            return;
        }

        $tag = M('article_tag')->where(['cn_name'=>$name])->find();
        if(!empty($tag)){
            $response = ['error' => 1, 'message' => '该标签名称已存在!'];
            echo json_encode($response);
            return;
        }

        $data = [
            'sort' => $sort,
            'cn_name' => $name,
            'create_time' => time(),
        ];
        //插入数据，返回插入后的id
        $insert_id = M('article_tag')->add($data);
        if ($insert_id) {
            $response = ['error' => 0, 'message' => 'OK'];
            echo json_encode($response);
        } else {
            $response = ['error' => 1, 'message' => '添加失败，请重试'];
            echo json_encode($response);
        }

    }

    //显示修改艺术号标签界面
    public function showEditTag()
    {
        $id = intval(I('get.id'));
        $page = intval(I('get.page'));
        $data = M('article_tag')->find($id);
        $this->assign('data', $data);
        $this->assign('page', $page);
        $this->display('editTag');
    }


    //编辑艺术号标签
    public function editTag()
    {
        $id = intval(I('post.id'));  //ID
        $sort = intval(trim(I('post.sort')));  //序号
        $name = addslashes(trim(I('post.name')));  //名称

        if(empty($name)){
            $response = ['error' => 1, 'message' => '标签名称不能为空!'];
            echo json_encode($response);
            return;
        }

        $tag = M('article_tag')->where(['cn_name'=>$name])->find();  //更新记录
        if($tag){
            $response = ['error' => 1, 'message' => '该标签名称已存在!'];
            echo json_encode($response);
            return;
        }

        $data = [
            'sort' => $sort,
            'cn_name' => $name,
            'create_time' => time(),
        ];
        $where['id'] = $id;
        $result = M('article_tag')->where($where)->save($data);  //更新记录
        if (false !== $result) {
            $response = ['error' => 0, 'message' => 'OK'];
            echo json_encode($response);
        } else {
            $response = ['error' => 1, 'message' => '更新失败，请重试'];
            echo json_encode($response);
        }
    }

    //删除标签操作
    public function deleteTag()
    {
        $ids = I('post.id');
        if(!is_array($ids)){//单个id转化成数组
            $ids=[intval($ids)];
        }else{
            foreach($ids as $key => $value)
            {
                $ids[$key]=intval($value);
            }
        }

        $where['id'] = array('in',$ids);
        $num = M('article_tag')->where($where)->delete();
        $return=['error'=>0,'delete_num'=>$num];
        echo json_encode($return);
    }

    //修改艺术号标签序号
    public function updateSort(){
        $id = intval(trim(I('post.id')));  //id
        $sort = intval(trim(I('post.sort')));  //序号
        $where['id'] = $id;
        $data['sort'] = $sort;
        $insertId = M('article_tag')->where(['id'=>$id])->save($data);
        if ($insertId) {
            $response = ['error' => 0, 'message' => 'OK'];
            echo json_encode($response);
        } else {
            $response = ['error' => 1, 'message' => '更新失败，请重试'];
            echo json_encode($response);
        }

    }

    #文章插入艺术家
    public function ImportUserList()
    {
        
        $type = trim(I('post.type'));
        $keyword = trim(I('post.keyword'));
        $page = I('post.page', '', 'number_int');
        $pagesize = I('post.pagesize', '', 'number_int');
        
        if ($keyword == '') {
            Util::jsonReturn(null, Code::PARAM_ERR, '关键字不能为空');
        }
        
        $page = $page <= 0 ? 1 : $page;
        $pagesize = $pagesize <= 0 ? 20 : $pagesize;
        $pagesize = $pagesize > 200 ? 20 : $pagesize;
        
        $userLogic = new UserLogic();
        $artModel = new ArtworkModel();
        $cateModel = new ArtworkCategoryModel();
        
        if ($type == 'artist') {
            $where['_string'] = "FIND_IN_SET('artist', role)";
        } elseif ($type == 'agency') {
            $where['_string'] = "FIND_IN_SET('agency', role)";
        } elseif ($type == 'planner') {
            $where['_string'] = "FIND_IN_SET('planner', role)";
        }
        
        $where['is_deleted'] = 'N';
        $where['nickname'] = array(
            'like',
            '%' . $keyword . '%'
        );
        
        $total = $userLogic->where($where)->count();
        $lists = $userLogic->field('id,name as title,nickname,face,role')
        ->where($where)
        ->order('id desc')
        ->page($page, $pagesize)
        ->select();
        
        $artist_list = []; // 作者ids
        foreach ($lists as $value) {
            array_push($artist_list, $value['id']);
        }
        $AgencyTypeList = $userLogic->getAgencyTypeList_byUids($artist_list); // 机构列表
        
        $lists_return = [];
        foreach ($lists as $value) {
            $list['id'] = $value['id'];
            $list["nickname"] = $value['nickname'];
            if ($type == 'artist') {
                $category_content = $cateModel->getContent(implode(',', $artModel->getFields([
                    'artist' => $value['id']
                ], 'category')));
                $list['category_names'] = implode('/', array_values($category_content));
            }
            $list["faceUrl"] = Util::getImageResize($value['face'], Image::faceWidth, Image::faceHeight);
            $list["is_artist"] = strpos(',' . $value['role'] . ',', ',artist,') !== false ? 1 : 0;
            $list['is_agency'] = $AgencyTypeList[$value['artist']] > 0 ? 1 : 0;
            $list['AgencyType'] = (int)$AgencyTypeList[$value['artist']];
            $list["is_planner"] = strpos(',' . $value['role'] . ',', ',planner,') !== false ? 1 : 0;
            
            $lists_return[] = $list; // 添加进articles
        }
        
        $maxpage = intval($total / $pagesize) + 1;
        $info = [
            'type' => $type,
            'list' => $lists_return,
            'page' => $page,
            'total' => $total,
            'pagesize' => $pagesize,
            'maxpage' => $maxpage
        ];
        
        Util::jsonReturn([
            'status' => Code::SUCCESS,
            'info' => $info
        ]);
    }

    #文章插入内容
    public function ImportContentList()
    {
        
        $type = trim(I('post.type'));
        $keyword = trim(I('post.keyword'));
        $date = trim(I('post.date'));
        $page = I('post.page', '', 'number_int');
        $pagesize = I('post.pagesize', '', 'number_int');
        
        $is_date=preg_match ("/^([0-9]{4})-([0-9]{2})-([0-9]{2})$/", $date);
        if($is_date){
            $time_from=strtotime($date);
            $time_to=$time_from+3600*24;
        }
        
        if ($keyword == ''&&!$is_date) {
            Util::jsonReturn(null, Code::PARAM_ERR, '关键字与日期不能为空');
        }
        
        $page = $page <= 0 ? 1 : $page;
        $pagesize = $pagesize <= 0 ? 20 : $pagesize;
        $pagesize = $pagesize > 200 ? 20 : $pagesize;
        
        $userLogic = new UserLogic();
        
        if ($type == 'artwork') {
            $Logic = new ArtworkLogic();
            $where['az_artwork.state'] = 1;
            $where['az_artwork.is_deleted'] = 'N';
            
            if($keyword!='') {
                $where['az_artwork.name'] = array(
                    'like',
                    '%' . $keyword . '%'
                );
            }
            
            $total = $Logic->where($where)->count();
            $lists = $Logic->field('az_artwork.id,az_artwork.artist,az_artwork.name as title,az_artwork.story as content,az_user.nickname,az_user.face,az_user.role')
            ->join('az_user on az_artwork.artist=az_user.id', 'left')
            ->where($where)
            ->order('id desc')
            ->page($page, $pagesize)
            ->select();
        } elseif ($type == 'article') {
            $Logic = new ArticleLogic();
            $where['az_article.status'] = 1;
            if($keyword!='') {
                $where['az_article.title'] = array(
                    'like',
                    '%' . $keyword . '%'
                );
            }
            
            $total = $Logic->where($where)->count();
            $lists = $Logic->field('az_article.id,az_article.artist,az_article.title,az_article.content,az_user.nickname,az_user.face,az_user.role')
            ->join('az_user on az_article.artist=az_user.id', 'left')
            ->where($where)
            ->order('id desc')
            ->page($page, $pagesize)
            ->select();
        } elseif ($type == 'artwork_update') {
            $Logic = new ArtworkUpdateLogic();
            $where['az_artwork_update.is_deleted'] = 'N';
            
            if($keyword!='') {
                $condition['az_artwork_update.title'] = array(
                    'like',
                    '%' . $keyword . '%'
                );
                $condition['_logic'] = "or";
                $condition['az_artwork.name'] = array(
                    'like',
                    '%' . $keyword . '%'
                );
                $where['_complex'] = $condition;
            }
            
            $total = $Logic->join('az_artwork on az_artwork_update.artwork_id=az_artwork.id', 'left')
            ->where($where)
            ->count();
            
            $lists = $Logic->field('az_artwork_update.id,az_artwork_update.artist,az_artwork.name as title,az_artwork_update.wit as content,az_user.nickname,az_user.face,az_user.role')
            ->join('az_artwork on az_artwork_update.artwork_id=az_artwork.id', 'left')
            ->join('az_user on az_artwork_update.artist=az_user.id', 'left')
            ->where($where)
            ->order('id desc')
            ->page($page, $pagesize)
            ->select();
        } elseif ($type == 'art_circle') {#艺术圈
            $Logic = new ArtCircleLogic();
            $where['status'] = 1;
            
            if($keyword!='') {
                $where['az_user.nickname'] = array(
                    'like',
                    '%' . $keyword . '%'
                );
            }
            
            if($is_date){
                $where['az_art_circle.create_time'] = array(array('gt',$time_from),array('lt',$time_to)) ;
            }
            
            $total = $Logic
            ->join('az_user on az_art_circle.user_id=az_user.id', 'left')
            ->where($where)->count();
            //echo $Logic->getLastSql();exit;
            $lists = $Logic->field('az_art_circle.type,az_art_circle.images_url,az_art_circle.video_poster,az_art_circle.video_url,az_art_circle.create_time,az_art_circle.id,az_art_circle.user_id as artist,az_art_circle.content as title,az_art_circle.content ,az_user.nickname,az_user.face,az_user.role')
            ->join('az_user on az_art_circle.user_id=az_user.id', 'left')
            ->where($where)
            ->order('id desc')
            ->page($page, $pagesize)
            ->select();
            
            // 分享列表
            $art_circle_share_list = [];
            $art_circle_ids = [];
            foreach ($lists as $value) {
                // if ($value['type'] == 2)
                array_push($art_circle_ids, $value['id']);
            }
            if (count($art_circle_ids)) {
                $ArtCircleShareLogic = new ArtCircleShareLogic();
                $art_circle_share_list = $ArtCircleShareLogic->share_link_list_indexArtCircleId($art_circle_ids);
            }
            // 分享列表 end
            
            //喜欢列表统计
            $art_circle_like_list=[];
            if(count($lists)>0){
                $art_circle_like=M('art_circle_like');
                $circle_like_where['art_circle_id']=['in',$art_circle_ids];
                $circle_like_where['status']=1;
                $like_list=$art_circle_like->field("art_circle_id,count(id) as counts")->where($circle_like_where)->group('art_circle_id')->select();
                foreach ($like_list as $value){
                    $art_circle_like_list[$value['art_circle_id']]=$value['counts'];
                }
            }
            //喜欢列表统计 end
            
            //评论列表统计
            $art_circle_comment_list=[];
            if(count($lists)>0){
                $art_circle_comment=M('art_circle_comment');
                $art_circle_comment_where['art_circle_id']=['in',$art_circle_ids];
                $art_circle_comment_where['status']=1;
                $like_list=$art_circle_comment->field("art_circle_id,count(id) as counts")->where($art_circle_comment_where)->group('art_circle_id')->select();
                foreach ($like_list as $value){
                    $art_circle_comment_list[$value['art_circle_id']]=$value['counts'];
                }
            }
            //评论列表统计 end
            
            
        }
        
        $artist_list = []; // 作者ids
        foreach ($lists as $value) {
            array_push($artist_list, $value['artist']);
        }
        $AgencyTypeList = $userLogic->getAgencyTypeList_byUids($artist_list); // 机构列表
        
        $lists_return = [];
        foreach ($lists as $value) {
            $list['id'] = $value['id'];
            if ($type == 'artwork') {
                $list['title'] = '《' . $value['title'] . '》';
            } elseif ($type == 'article') {
                $list['title'] = $value['title'];
            } elseif ($type == 'artwork_update') {
                $list['title'] = '《' . $value['title'] . '》花絮';
            } elseif ($type == 'art_circle') { #艺术圈
                
                
                $list['type'] = (int)$value['type'];
                $list['content'] = html_entity_decode($value['content']);
                
                $images_url_arr = explode(',', trim($value['images_url']));
                if (count($images_url_arr) == 1) {
                    $list['thumbnails'] = trim($value['images_url']) == '' ? [] : Util::getImageResizes_oldProportion($images_url_arr, 300);
                } else {
                    $list['thumbnails'] = trim($value['images_url']) == '' ? [] : Util::getImageResizes($images_url_arr, 300, 300);
                }
                $list['images_url'] = trim($value['images_url']) == '' ? [] : Util::imageWaters($images_url_arr);
                $list['video_poster'] = $value['video_poster'];
                $list['video_url'] = $value['video_url'];
                $list['datetime'] = Util::simpleTimeShow($value['create_time']);
                $list['like_total']=(int)$art_circle_like_list[$value['id']];
                $list['comment_total']=(int)$art_circle_comment_list[$value['id']];
                $list['share_link'] = is_array($art_circle_share_list[$value['id']]) ? $art_circle_share_list[$value['id']] : (object)null;
            }
            
            $list['excerpt'] = html_deconvert_content_cut($value['content'], 70);
            
            $list['user'] = [
                "id" => $value['artist'],
                "nickname" => $value['nickname'],
                "faceUrl" => Util::getImageResize($value['face'], Image::faceWidth, Image::faceHeight),
                "is_artist" => strpos(',' . $value['role'] . ',', ',artist,') !== false ? 1 : 0,
                'is_agency' => $AgencyTypeList[$value['artist']] > 0 ? 1 : 0,
                'AgencyType' => (int)$AgencyTypeList[$value['artist']],
                "is_planner" => strpos(',' . $value['role'] . ',', ',planner,') !== false ? 1 : 0
            ];
            
            $lists_return[] = $list; // 添加进articles
        }
        
        $maxpage = intval($total / $pagesize) + 1;
        $info = [
            'type' => $type,
            'list' => $lists_return,
            'page' => $page,
            'total' => $total,
            'pagesize' => $pagesize,
            'maxpage' => $maxpage
        ];
        
        Util::jsonReturn([
            'status' => Code::SUCCESS,
            'info' => $info
        ]);
    }
    
    public function getArticleInfo()
    {
      
        
        $id = I('post.id', '', 'number_int');
        $ArticleLogic = new ArticleLogic();
        $articleinfo = $ArticleLogic->where("id=" . intval($id) . "  and status!=0")->find();
        if (!$articleinfo) {
            Util::jsonReturn(null, Code::SYS_ERR, '记录不存在');
        }
        $tags=$ArticleLogic->get_tag_names($articleinfo['tag']);
        if ($tags == '') {
            $tag_list = [];
        } else {
            $tag_list = explode(',', $tags);
        }
        
        $articleinfo = [
            'id' => $id,
            'type' => $articleinfo['status'],
            'title' => $articleinfo['title'],
            'tag'=>$tag_list,
            'excerpt' => $articleinfo['excerpt'],
            'content' => html_entity_decode($articleinfo['content'], ENT_QUOTES),
            'cover' => trim($articleinfo['cover']),
            'last_update_time' => date('Y-m-d', $articleinfo['modified_time'])
        ];
        
        $info = $articleinfo;
        
        Util::jsonReturn([
            'status' => Code::SUCCESS,
            'info' => $info
        ]);
    }
    
    public function getTags(){
        $ArticleLogic = new ArticleLogic();
        $tags=$ArticleLogic->get_article_tag_list_all();
        $info=['tag'=>$tags];
        Util::jsonReturn([
            'status' => Code::SUCCESS,
            'info' => $info
        ]);
    }

    //艺术号审核列表
    public function verifyList()
    {
        $nickname = I('get.nickname');
        $content = I('get.content');
        $title = I('get.title');
        $sdate = I('get.sdate');  //注册开始时间
        $edate = I('get.edate');  //注册结束时间
        $status = intval(I('get.status',3));  //审核状态
        $page = I('get.page', '1');  //页码
        $ArticleLogic = new ArticleLogic();


        $where = "az_user.role = '' and az_article.artist not in (100000,100001)";
        $order = 'az_article.id DESC';
        if (trim($nickname) != '') {
            $where = $where . " and az_user.nickname like '%" . addslashes(trim($nickname)) . "%'";
        }
        if (trim($title) != '') {
            $where = $where . " and az_article.title like '%" . addslashes(trim($title)) . "%'";
        }
        if (trim($content) != '') {
            $where = $where . " and az_article.content like '%" . addslashes(trim($content)) . "%'";
        }
        if ($this->checkDateFormat($sdate)) {
            if(strtotime($sdate)){
                $where = $where . " and az_article.create_time>=" . strtotime($sdate);
            }
        }
        if ($this->checkDateFormat($edate)) {
            if(strtotime($edate)){
                $edate_time = strtotime($edate) + 86400;
                $where = $where . " and az_article.create_time<=" . $edate_time;
            }
        }
        if ($status>0) {
            $where = $where . " and az_article.status= ".$status;
        }else{
            $where = $where." and az_article.status in (1,2,3,4)";
        }



        $ArticleTotal = $ArticleLogic
            ->join('az_user on az_user.id=az_article.artist','left')
            ->where($where)->count();
//echo $ArticleLogic->getLastSql();
        $lists = $ArticleLogic
            ->field('az_article.comment_count,az_article.like_count,az_article.real_views,az_article.views,az_article.is_collect,az_article.collect_wait_publish,az_article.id,az_article.title,az_article.artist,az_user.nickname,az_article.create_time,az_article.status,import_uniqid')
            ->join('az_user on az_user.id=az_article.artist','left')
            ->where($where)
            ->order($order)
            ->page($page, $this->pagesize)
            ->select();


        $nav = Nav::render(U('Admin/Article/verifyList'), ['nickname' => $nickname, 'title' => $title, 'content' => $content, 'sdate' => $sdate, 'edate' => $edate,'status'=>$status], $page, $this->pagesize, $ArticleTotal);

        $this->assign('nav', $nav);
        $this->assign('lists', $lists);
        $this->assign('status', $status);

        $this->display();
    }

    //审核页面显示
    public function showVerify()
    {
        $id = intval(I('get.id'));
        $ArticleLogic = new ArticleLogic();
        $data = $ArticleLogic->find($id);
        $tag_names=$ArticleLogic->get_tag_names($data['tag'],1);//配置的标签
        $tag_names_custom=$ArticleLogic->get_tag_names($data['tag'],2);//用户自定义标签
        $video = 0;
        if(empty($data['cover'])){//没有封面图
            //获取更新记录里面的视频
            preg_match_all('/&lt;video.*?poster=&quot;(.*?)&quot;.*?&gt;/is', $data['content'], $match);
            if(!empty($match[1])){//有视频
                $data['cover'] = Util::getImageResize($match[1][0], 300, 300);
                $video=1;
            }else{
                preg_match_all('/&lt;img.*?src=&quot;(.*?)&quot;.*?&gt;/is', $data['content'], $array);
                if(!empty($array)){//有图片
                    $data['cover']='';
                    foreach($array[1] as $v){
                        if(!stripos($v,'?x-oss-process')){
                            $data['cover'] =  Util::getImageResize($v, 300, 300);
                            break;
                        }
                    }
                }else{
                    $data['cover']='';
                }
            }
        }else{
            $data['cover'] = Util::getImageResize($data['cover'], 300, 300);
        }
        $data['video'] = $video;


        $this->assign('tag_names', $tag_names);
        $this->assign('tag_names_custom', $tag_names_custom);
        $this->assign('data', $data);
        $this->display('verify');
    }

    //审核操作
    public function verify()
    {
        $id = intval(I('post.id'));  //ID
        $publish_time=trim(I('post.publish_time'));
        $status = intval(I('post.status'));  //状态
        $tag = trim(I('post.tag',''));  //tag
        $ArticleLogic = new ArticleLogic();
        $messageLogic = new MessageLogic();
        $article=$ArticleLogic->find($id);
        $tag_ids=$ArticleLogic->get_tag_ids($tag);

        $oldtag = trim(trim($article['tag'],'，'),',');
        $data = [
            'publish_time' => empty($publish_time)?time():strtotime($publish_time),
            'status' => $status,
            'tag'=>empty($oldtag)?$tag_ids:$oldtag.','.$tag_ids,
        ];
        $where['id'] = $id;
        if(!empty($article)){
            if($status != 1){
                $data['publish_time']=0;
            }
            $result = $ArticleLogic->where($where)->save($data);  //更新记录
            if (false !== $result) {
                $title=trim($article['title']);
                if(preg_match("/《(.*)》/",$title)){
                    $title = ' ' .$title. ' ';//trim($artwork_name,'《》');
                }else{
                    $title = '《' .$title. '》';
                }
                if($status==0){//文章被删除，发送消息
                   /* $msg=$messageLogic
                        ->where(['content'=>'您的文章'.$title.'由于“被人举报”而被删除。','to_user_id'=>$article['artist'],'from_user_id'=>-1])
                        ->find();*/
                    $messageLogic->sendSysMessage($article['artist'],'您的文章'.$title.'由于“被人举报”而被删除。');
                }
                if($status==1){//文章审核通过，发送消息
                   /* $msg=$messageLogic
                        ->where(['content'=>'恭喜您，您的文章'.$title.'已入选艺术号精品库，将会展现在“推荐”页中，请加油创作累积名气！','to_user_id'=>$article['artist'],'from_user_id'=>-1])
                        ->find();*/
                    $messageLogic->sendSysMessage($article['artist'],'恭喜您，您的文章'.$title.'已入选艺术号精品库，将会展现在“推荐”页中，请加油创作累积名气！');
                   
                }
                $response = ['error' => 0, 'message' => 'OK'];
                echo json_encode($response);
            }else {
                $response = ['error' => 1, 'message' => '更新失败，请重试！'];
                echo json_encode($response);
            }
        }else {
            $response = ['error' => 1, 'message' => '文章已删除！'];
            echo json_encode($response);
        }

    }

}
