<?php

namespace Mp\Controller;

require_once ROOT_PATH . "vendor/simple_html_dom.php";
use Mp\Base\ApiBaseController;
use Mp\Logic\ArticleLogic;
use Mp\Logic\ArticleLikeLogic;
use Mp\Logic\ArtworkUpdateLogic;
use Mp\Logic\UserLogic;
use Mp\Logic\AssetsLogic;
use Mp\Model\ArtworkModel;
use Mp\Model\ArtworkCategoryModel;
use Custom\Helper\Util;
use Custom\Define\Code;
use Custom\Manager\Token;
use Custom\Helper\Verify;
use Custom\Helper\Checker;
use Mp\Logic\UserFollowerLogic;
use Mp\Logic\ArtworkCategoryLogic;
use Mp\Logic\ArtworkLogic;
use Custom\Define\Image;
use Custom\Helper\AliyunMts;
use Mp\Logic\ArtCircleLogic;
use Mp\Logic\ArtCircleShareLogic;

class ArticleController extends ApiBaseController
{
    public function getTags(){
        $ArticleLogic = new ArticleLogic();
        $tags=$ArticleLogic->get_article_tag_list_all();
        $info=['tag'=>$tags];
        Util::jsonReturn([
            'status' => Code::SUCCESS,
            'info' => $info
        ]);
    }

    public function ImportUserList()
    {
        $type = trim(I('post.type'));
        $keyword = trim(I('post.keyword'));
        $page = I('post.page', '', 'number_int');
        $pagesize = I('post.pagesize', '', 'number_int');

        if ($keyword == '') {
            Util::jsonReturn(null, Code::PARAM_ERR, '关键字不能为空');
        }

        $page = $page <= 0 ? 1 : $page;
        $pagesize = $pagesize <= 0 ? 20 : $pagesize;
        $pagesize = $pagesize > 200 ? 20 : $pagesize;

        $userLogic = new UserLogic();
        $artModel = new ArtworkModel();
        $cateModel = new ArtworkCategoryModel();

        if ($type == 'artist') {
            $where['_string'] = "FIND_IN_SET('artist', role)";
        } elseif ($type == 'agency') {
            $where['_string'] = "FIND_IN_SET('agency', role)";
        } elseif ($type == 'planner') {
            $where['_string'] = "FIND_IN_SET('planner', role)";
        }

        $where['is_deleted'] = 'N';
        $where['nickname'] = array(
            'like',
            '%' . $keyword . '%'
        );

        $total = $userLogic->where($where)->count();
        $lists = $userLogic->field('id,name as title,nickname,face,role')
            ->where($where)
            ->order('id desc')
            ->page($page, $pagesize)
            ->select();

        $artist_list = []; // 作者ids
        foreach ($lists as $value) {
            array_push($artist_list, $value['id']);
        }
        $AgencyTypeList = $userLogic->getAgencyTypeList_byUids($artist_list); // 机构列表

        $lists_return = [];
        foreach ($lists as $value) {
            $list['id'] = $value['id'];
            $list["nickname"] = $value['nickname'];
            if ($type == 'artist') {
                $category_content = $cateModel->getContent(implode(',', $artModel->getFields([
                    'artist' => $value['id']
                ], 'category')));
                $list['category_names'] = implode('/', array_values($category_content));
            }
            $list["faceUrl"] = Util::getImageResize($value['face'], Image::faceWidth, Image::faceHeight);
            $list["is_artist"] = strpos(',' . $value['role'] . ',', ',artist,') !== false ? 1 : 0;
            $list['is_agency'] = $AgencyTypeList[$value['artist']] > 0 ? 1 : 0;
            $list['AgencyType'] = (int)$AgencyTypeList[$value['artist']];
            $list["is_planner"] = strpos(',' . $value['role'] . ',', ',planner,') !== false ? 1 : 0;

            $lists_return[] = $list; // 添加进articles
        }

        $maxpage = intval($total / $pagesize) + 1;
        $info = [
            'type' => $type,
            'list' => $lists_return,
            'page' => $page,
            'total' => $total,
            'pagesize' => $pagesize,
            'maxpage' => $maxpage
        ];

        Util::jsonReturn([
            'status' => Code::SUCCESS,
            'info' => $info
        ]);
    }

    public function ImportContentList()
    {
        $type = trim(I('post.type'));
        $keyword = trim(I('post.keyword'));
        $date = trim(I('post.date'));
        $page = I('post.page', '', 'number_int');
        $pagesize = I('post.pagesize', '', 'number_int');

        $is_date=preg_match ("/^([0-9]{4})-([0-9]{2})-([0-9]{2})$/", $date);
        if($is_date){
            $time_from=strtotime($date);
            $time_to=$time_from+3600*24;
        }

        if ($keyword == ''&&!$is_date) {
            Util::jsonReturn(null, Code::PARAM_ERR, '关键字与日期不能为空');
        }

        $page = $page <= 0 ? 1 : $page;
        $pagesize = $pagesize <= 0 ? 20 : $pagesize;
        $pagesize = $pagesize > 200 ? 20 : $pagesize;

        $userLogic = new UserLogic();

        if ($type == 'artwork') {
            $Logic = new ArtworkLogic();
            $where['az_artwork.state'] = 1;
            $where['az_artwork.is_deleted'] = 'N';

            if($keyword!='') {
                $where['az_artwork.name'] = array(
                    'like',
                    '%' . $keyword . '%'
                );
            }

            $total = $Logic->where($where)->count();
            $lists = $Logic->field('az_artwork.id,az_artwork.artist,az_artwork.name as title,az_artwork.story as content,az_user.nickname,az_user.face,az_user.role')
                ->join('az_user on az_artwork.artist=az_user.id', 'left')
                ->where($where)
                ->order('id desc')
                ->page($page, $pagesize)
                ->select();
        } elseif ($type == 'article') {
            $Logic = new ArticleLogic();
            $where['az_article.status'] = 1;
            if($keyword!='') {
                $where['az_article.title'] = array(
                    'like',
                    '%' . $keyword . '%'
                );
            }

            $total = $Logic->where($where)->count();
            $lists = $Logic->field('az_article.id,az_article.artist,az_article.title,az_article.content,az_user.nickname,az_user.face,az_user.role')
                ->join('az_user on az_article.artist=az_user.id', 'left')
                ->where($where)
                ->order('id desc')
                ->page($page, $pagesize)
                ->select();
        } elseif ($type == 'artwork_update') {
            $Logic = new ArtworkUpdateLogic();
            $where['az_artwork_update.is_deleted'] = 'N';

            if($keyword!='') {
                $condition['az_artwork_update.title'] = array(
                    'like',
                    '%' . $keyword . '%'
                );
                $condition['_logic'] = "or";
                $condition['az_artwork.name'] = array(
                    'like',
                    '%' . $keyword . '%'
                );
                $where['_complex'] = $condition;
            }

            $total = $Logic->join('az_artwork on az_artwork_update.artwork_id=az_artwork.id', 'left')
                ->where($where)
                ->count();

            $lists = $Logic->field('az_artwork_update.id,az_artwork_update.artist,az_artwork.name as title,az_artwork_update.wit as content,az_user.nickname,az_user.face,az_user.role')
                ->join('az_artwork on az_artwork_update.artwork_id=az_artwork.id', 'left')
                ->join('az_user on az_artwork_update.artist=az_user.id', 'left')
                ->where($where)
                ->order('id desc')
                ->page($page, $pagesize)
                ->select();
        } elseif ($type == 'art_circle') {#艺术圈
            $Logic = new ArtCircleLogic();
            $where['status'] = 1;

            if($keyword!='') {
                $where['az_user.nickname'] = array(
                    'like',
                    '%' . $keyword . '%'
                );
            }

            if($is_date){
                $where['az_art_circle.create_time'] = array(array('gt',$time_from),array('lt',$time_to)) ;
            }

            $total = $Logic
                ->join('az_user on az_art_circle.user_id=az_user.id', 'left')
                ->where($where)->count();
//echo $Logic->getLastSql();exit;
            $lists = $Logic->field('az_art_circle.type,az_art_circle.images_url,az_art_circle.video_poster,az_art_circle.video_url,az_art_circle.create_time,az_art_circle.id,az_art_circle.user_id as artist,az_art_circle.content as title,az_art_circle.content ,az_user.nickname,az_user.face,az_user.role')
                ->join('az_user on az_art_circle.user_id=az_user.id', 'left')
                ->where($where)
                ->order('id desc')
                ->page($page, $pagesize)
                ->select();

            // 分享列表
            $art_circle_share_list = [];
            $art_circle_ids = [];
            foreach ($lists as $value) {
                // if ($value['type'] == 2)
                array_push($art_circle_ids, $value['id']);
            }
            if (count($art_circle_ids)) {
                $ArtCircleShareLogic = new ArtCircleShareLogic();
                $art_circle_share_list = $ArtCircleShareLogic->share_link_list_indexArtCircleId($art_circle_ids);
            }
            // 分享列表 end 
            
            //喜欢列表统计
            $art_circle_like_list=[];
            if(count($lists)>0){
                $art_circle_like=M('art_circle_like');
                $circle_like_where['art_circle_id']=['in',$art_circle_ids];
                $circle_like_where['status']=1;
                $like_list=$art_circle_like->field("art_circle_id,count(id) as counts")->where($circle_like_where)->group('art_circle_id')->select();
                foreach ($like_list as $value){
                    $art_circle_like_list[$value['art_circle_id']]=$value['counts'];
                }
            }
            //喜欢列表统计 end
            
            //评论列表统计
            $art_circle_comment_list=[];
            if(count($lists)>0){
                $art_circle_comment=M('art_circle_comment');
                $art_circle_comment_where['art_circle_id']=['in',$art_circle_ids];
                $art_circle_comment_where['status']=1;
                $like_list=$art_circle_comment->field("art_circle_id,count(id) as counts")->where($art_circle_comment_where)->group('art_circle_id')->select();
                foreach ($like_list as $value){
                    $art_circle_comment_list[$value['art_circle_id']]=$value['counts'];
                }
            }
            //评论列表统计 end
            
        }

        $artist_list = []; // 作者ids
        foreach ($lists as $value) {
            array_push($artist_list, $value['artist']);
        }
        $AgencyTypeList = $userLogic->getAgencyTypeList_byUids($artist_list); // 机构列表

        $lists_return = [];
        foreach ($lists as $value) {
            $list['id'] = $value['id'];
            if ($type == 'artwork') {
                $list['title'] = '《' . $value['title'] . '》';
            } elseif ($type == 'article') {
                $list['title'] = $value['title'];
            } elseif ($type == 'artwork_update') {
                $list['title'] = '《' . $value['title'] . '》花絮';
            } elseif ($type == 'art_circle') { #艺术圈


                $list['type'] = (int)$value['type'];
                $list['content'] = html_entity_decode($value['content']);

                $images_url_arr = explode(',', trim($value['images_url']));
                if (count($images_url_arr) == 1) {
                    $list['thumbnails'] = trim($value['images_url']) == '' ? [] : Util::getImageResizes_oldProportion($images_url_arr, 300);
                } else {
                    $list['thumbnails'] = trim($value['images_url']) == '' ? [] : Util::getImageResizes($images_url_arr, 300, 300);
                }
                $list['images_url'] = trim($value['images_url']) == '' ? [] : Util::imageWaters($images_url_arr);
                $list['video_poster'] = $value['video_poster'];
                $list['video_url'] = $value['video_url'];
                $list['datetime'] = Util::simpleTimeShow($value['create_time']);
                $list['like_total']=(int)$art_circle_like_list[$value['id']];
                $list['comment_total']=(int)$art_circle_comment_list[$value['id']];
                $list['share_link'] = is_array($art_circle_share_list[$value['id']]) ? $art_circle_share_list[$value['id']] : (object)null;
            }

            $list['excerpt'] = html_deconvert_content_cut($value['content'], 70);

            $list['user'] = [
                "id" => $value['artist'],
                "nickname" => $value['nickname'],
                "faceUrl" => Util::getImageResize($value['face'], Image::faceWidth, Image::faceHeight),
                "is_artist" => strpos(',' . $value['role'] . ',', ',artist,') !== false ? 1 : 0,
                'is_agency' => $AgencyTypeList[$value['artist']] > 0 ? 1 : 0,
                'AgencyType' => (int)$AgencyTypeList[$value['artist']],
                "is_planner" => strpos(',' . $value['role'] . ',', ',planner,') !== false ? 1 : 0
            ];

            $lists_return[] = $list; // 添加进articles
        }

        $maxpage = intval($total / $pagesize) + 1;
        $info = [
            'type' => $type,
            'list' => $lists_return,
            'page' => $page,
            'total' => $total,
            'pagesize' => $pagesize,
            'maxpage' => $maxpage
        ];

        Util::jsonReturn([
            'status' => Code::SUCCESS,
            'info' => $info
        ]);
    }

    public function getlist()
    {
        $userLogic = new UserLogic(); // 实例化用户模块
        // $udd=$userLogic->getUserInfoById($this->loginUserId);
        // print_r($udd);

        $page = I('post.page', '', 'number_int');
        $pagesize = I('post.pagesize', '', 'number_int');

        $page = $page <= 0 ? 1 : $page;
        $pagesize = $pagesize <= 0 ? 20 : $pagesize;
        $pagesize = $pagesize > 200 ? 20 : $pagesize;

        $ArticleLogic = new ArticleLogic();

        $where = 'az_article.status=1';
        $total = $ArticleLogic->where($where)->count();

        $list = $ArticleLogic->field('az_article.cover,az_article.id,az_article.artist,az_article.title,az_article.excerpt,az_article.like_count,az_article.content,az_user.nickname,az_user.face,az_user.role')
            ->join('az_user on az_article.artist=az_user.id', 'left')
            ->where($where)
            ->order('publish_time desc,id desc')
            ->page($page, $pagesize)
            ->select();

        $artist_list = []; // 作者ids
        foreach ($list as $value) {
            array_push($artist_list, $value['artist']);
        }
        $AgencyTypeList = $userLogic->getAgencyTypeList_byUids($artist_list); // 机构列表

        $article_ids = []; // 文章id列表
        foreach ($list as $value) {
            array_push($article_ids, $value['id']);
        }

        $like_list = []; // 用户点赞列表
        if (count($article_ids) && $this->loginUserId > 0) { // 查询登录用户的点赞列表
            $ArticleLike_list = M('ArticleLike')->where("article_id in (" . implode(',', $article_ids) . ") and like_user_id=" . intval($this->loginUserId) . " and is_like=1")->select();
        }
        foreach ($ArticleLike_list as $like) {
            $like_list[$like['article_id']] = 1;
        }

        $articles = [];
        foreach ($list as $value) {
            $article['id'] = $value['id'];
            $article['title'] = $value['title'];
            $article['excerpt'] = empty($value['excerpt']) ? html_deconvert_content_cut($value['content'], 70) : $value['excerpt'];
            $article['like_count'] = $value['like_count'];
            $article['is_like'] = $like_list[$value['id']] == 1 ? 1 : 0;
            $video = 0;
            if (empty($value['cover'])) { // 没有封面图
                // 获取更新记录里面的视频
                preg_match_all('/&lt;video.*?poster=&quot;(.*?)&quot;.*?&gt;/is', $value['content'], $match);
                if (!empty($match[1])) { // 有视频
                    $article['cover'] = Util::getImageResize($match[1][0], 300, 300);
                    $video = 1;
                } else {
                    preg_match_all('/&lt;img.*?src=&quot;(.*?)&quot;.*?&gt;/is', $value['content'], $array);
                    if (!empty($array)) { // 有图片
                        $article['cover'] = Util::getImageResize($array[1][0], 300, 300);
                    } else {
                        $article['cover'] = '';
                    }
                }
            } else {
                $article['cover'] = Util::getImageResize($value['cover'], 300, 300);
            }
            $article['video'] = $video;

            $article['user'] = [
                "id" => $value['artist'],
                "nickname" => $value['nickname'],
                "faceUrl" => Util::getImageResize($value['face'], Image::faceWidth, Image::faceHeight),
                "is_artist" => strpos(',' . $value['role'] . ',', ',artist,') !== false ? 1 : 0,
                'is_agency' => $AgencyTypeList[$value['artist']] > 0 ? 1 : 0,
                'AgencyType' => (int)$AgencyTypeList[$value['artist']],
                "is_planner" => strpos(',' . $value['role'] . ',', ',planner,') !== false ? 1 : 0
            ];

            $articles[] = $article; // 添加进articles
        }

        $maxpage = intval($total / $pagesize) + 1;
        $info = [
            'articles' => $articles,
            'page' => $page,
            'total' => $total,
            'pagesize' => $pagesize,
            'maxpage' => $maxpage
        ];

        Util::jsonReturn([
            'status' => Code::SUCCESS,
            'info' => $info
        ]);
    }

    public function getlist_20170920() // 20170920 三张图片的备份
    {
        $userLogic = new UserLogic(); // 实例化用户模块
        // $udd=$userLogic->getUserInfoById($this->loginUserId);
        // print_r($udd);

        $page = I('post.page', '', 'number_int');
        $pagesize = I('post.pagesize', '', 'number_int');

        $page = $page <= 0 ? 1 : $page;
        $pagesize = $pagesize <= 0 ? 20 : $pagesize;
        $pagesize = $pagesize > 200 ? 20 : $pagesize;

        $ArticleLogic = new ArticleLogic();

        $where = 'az_article.status=1';
        $total = $ArticleLogic->where($where)->count();

        $list = $ArticleLogic->field('az_article.cover,az_article.id,az_article.artist,az_article.title,az_article.excerpt,az_article.like_count,az_article.content,az_user.nickname,az_user.face,az_user.role')
            ->join('az_user on az_article.artist=az_user.id', 'left')
            ->where($where)
            ->order('id desc')
            ->page($page, $pagesize)
            ->select();

        $artist_list = []; // 作者ids
        foreach ($list as $value) {
            array_push($artist_list, $value['artist']);
        }
        $AgencyTypeList = $userLogic->getAgencyTypeList_byUids($artist_list); // 机构列表

        $article_ids = []; // 文章id列表
        foreach ($list as $value) {
            array_push($article_ids, $value['id']);
        }

        $like_list = []; // 用户点赞列表
        if (count($article_ids) && $this->loginUserId > 0) { // 查询登录用户的点赞列表
            $ArticleLike_list = M('ArticleLike')->where("article_id in (" . implode(',', $article_ids) . ") and like_user_id=" . intval($this->loginUserId) . " and is_like=1")->select();
        }
        foreach ($ArticleLike_list as $like) {
            $like_list[$like['article_id']] = 1;
        }

        $articles = [];
        foreach ($list as $value) {
            $article['id'] = $value['id'];
            $article['title'] = $value['title'];
            $article['excerpt'] = $value['excerpt'];
            $article['like_count'] = $value['like_count'];
            $article['is_like'] = $like_list[$value['id']] == 1 ? 1 : 0;

            // 获取里面的图片
            preg_match_all('/<img.*?src="(.*?)".*?>/is', $value['content'], $array);
            $article['images'] = empty($array[1]) ? [] : Util::getImageResizes($array[1], 300, 300);
            $article['images'] = array_slice($article['images'], 0, 3);
            // 文章里面图片少于3张，则显示封面图
            if (count($article['images']) < 3 && trim($value['cover']) != '') {
                $article['images'] = Util::getImageResizes([
                    $value['cover']
                ], 300, 300);
            }
            // $article['images']=count($article['images'])==0&&trim($value['cover'])!=''?Util::getImageResizes([$value['cover']], 300, 300):$article['images'];

            // 获取里面的视频
            preg_match_all('/<video.*?poster="(.*?)".*?>/is', $value['content'], $match);
            $article['video'] = empty($match[1]) ? '' : $match[1][0];
            if (trim($article['video']) != '') {
                $article['video'] = Util::getImageResize($article['video'], 750, 350);
            }
            $article['user'] = [
                "id" => $value['artist'],
                "nickname" => $value['nickname'],
                "faceUrl" => $value['face'],
                "is_artist" => strpos(',' . $value['role'] . ',', ',artist,') !== false ? 1 : 0,
                'is_agency' => $AgencyTypeList[$value['artist']] > 0 ? 1 : 0,
                'AgencyType' => (int)$AgencyTypeList[$value['artist']],
                "is_planner" => strpos(',' . $value['role'] . ',', ',planner,') !== false ? 1 : 0
            ];

            $articles[] = $article; // 添加进articles
        }

        $maxpage = intval($total / $pagesize) + 1;
        $info = [
            'articles' => $articles,
            'page' => $page,
            'total' => $total,
            'pagesize' => $pagesize,
            'maxpage' => $maxpage
        ];

        Util::jsonReturn([
            'status' => Code::SUCCESS,
            'info' => $info
        ]);
    }

    public function save()
    {
        $this->checkLogin(); // 判断用户是否登录

        $UserLogic = new UserLogic();
        // 艺术家 策展人 艺术机构才能发布艺术号
        if (!$UserLogic->isArtist($this->loginUserId) && !$UserLogic->isAgency($this->loginUserId) && !$UserLogic->isPlann($this->loginUserId)) {
            Util::jsonReturn(null, Code::SYS_ERR, '没有权限');
        }

        $id = I('post.id', '', 'number_int');
        $type = I('post.type', '', 'number_int'); // 草稿还是正式文章
        $title = trim(I('post.title', ''));
        $tag = trim(I('post.tag', ''));
        $content = trim(I('post.content', ''));
        // echo $content;exit;
        $excerpt = trim(I('post.excerpt', '')); // 描述
        $cover = trim(I('post.cover'));
        $Share2ArtCircle = I('post.Share2ArtCircle'); // 是否分享到艺术圈
        $publish_time = empty(I('post.publish_time'))?time():strtotime(I('post.publish_time'));//发布时间,默认当前时间
        if ($title == '' || $content == '' || (!in_array($type, [
                1,
                2
            ]))
        ) {
            Util::jsonReturn(null, Code::SYS_ERR, '不能为空');
        }

        $ArticleLogic = new ArticleLogic();
        
        $tag_ids=$ArticleLogic->get_tag_ids($tag);
        
        if ($id > 0) { // 编辑
            $thistime = time();
            // $articleinfo = $ArticleLogic->where(['id' => intval($id), 'artist' => $this->loginUserId])->find();
            $articleinfo = $ArticleLogic->where('id=' . intval($id) . ' and artist=' . $this->loginUserId . ' and status!=0')->find();
            if (!$articleinfo) {
                Util::jsonReturn(null, Code::SYS_ERR, '记录不存在');
            }
            if ($type == 2 && $articleinfo['status'] == 1) { // 已经是正式的文章，不能保存到草稿
                Util::jsonReturn(null, Code::SYS_ERR, '正式的文章，不能保存到草稿');
            }
            // if($articleinfo['status']==1&&$thistime-$articleinfo['modified_time']>86400){//24小时后不能再修改
            // Util::jsonReturn(null, Code::SYS_ERR, '已经发布了的文章，24小时后不能再修改');
            // }
           // $content = $this->html_insert_video_screenshot($content);
            $data = [
                'status' => intval($type),
                'title' => $title,
                'tag' => $tag_ids,
                'content' => $content,
                'excerpt' => $excerpt,
                'cover' => $cover,
                'modified_time' => $thistime,
            ];

            if ($type == 1) {
                $data['publish_time'] = $publish_time; // 发布时间
            }

            if ($type == 1) {
                // 分享到艺术圈
                if ($Share2ArtCircle == 1) {
                    $ArtCircleLogic = new ArtCircleLogic();
                    $share_info = $ArtCircleLogic->getShareInfo('art_article', $id);
                    if ($share_info !== false) {
                        $ArtCircledata = [
                            'type' => 13,
                            'address' => '',
                            'content' => '',
                            'images_url' => '',
                            'video_poster' => '',
                            'video_url' => '',
                            'user_id' => $this->loginUserId,
                            'create_time' => $publish_time,//time()
                        ];
                        $ArtCircle_insertId = $ArtCircleLogic->add($ArtCircledata);
                        $ArtCircleShareLogic = new ArtCircleShareLogic();
                        $share_info['art_circle_id'] = $ArtCircle_insertId;
                        $share_insertId = $ArtCircleShareLogic->add($share_info);
                    }
                }
            }

            $condition['where'] = 'id=' . intval($id) . ' and artist=' . $this->loginUserId;
            $ArticleLogic->save($data, $condition);
            // echo $ArticleLogic->getLastSql();
            Util::jsonReturn([
                'status' => 1000
            ]);
        } else { // 新增
            $thistime = time();
            // 发布文章限制
            $draft_max = 100;
            $publish_max = 50;
            $time_from = strtotime(date('Y-m-d'));
            $time_end = $time_from + 86400;
            $article_draft = $ArticleLogic->where('artist=' . $this->loginUserId . ' and status=2 and create_time>=' . $time_from . ' and create_time<' . $time_end)->count();
            $article_publish = $ArticleLogic->where('artist=' . $this->loginUserId . ' and status=1 and create_time>=' . $time_from . ' and create_time<' . $time_end)->count();
            if ($type == 2 && $article_draft >= $draft_max) {
                Util::jsonReturn(null, Code::SYS_ERR, '你的草稿已超过' . $draft_max . '篇了');
            }
            if ($type == 1 && $article_publish >= $publish_max) {
                Util::jsonReturn(null, Code::SYS_ERR, '你今天已发布了' . $publish_max . '篇文章了');
            }
            // 发布文章限制 end
            //$content = $this->html_insert_video_screenshot($content);
            $data = [
                'artist' => $this->loginUserId,
                'id' => intval($id),
                'status' => intval($type),
                'title' => $title,
                'tag' => $tag_ids,
                'content' => $content,
                'excerpt' => $excerpt,
                'cover' => $cover,
                'create_time' => $thistime,
                'modified_time' => $thistime
            ];
            if ($type == 1) {
                $data['publish_time'] = $publish_time; // 发布时间
            }

            $Article_id = $ArticleLogic->add($data);
            if ($type == 1) {
                // 分享到艺术圈
                if ($Share2ArtCircle == 1) {
                    $ArtCircleLogic = new ArtCircleLogic();
                    $share_info = $ArtCircleLogic->getShareInfo('art_article', $Article_id);
                    if ($share_info !== false) {
                        $ArtCircledata = [
                            'type' => 13,
                            'address' => '',
                            'content' => '',
                            'images_url' => '',
                            'video_poster' => '',
                            'video_url' => '',
                            'user_id' => $this->loginUserId,
                            'create_time' => $publish_time,//time()
                        ];
                        $ArtCircle_insertId = $ArtCircleLogic->add($ArtCircledata);
                        $ArtCircleShareLogic = new ArtCircleShareLogic();
                        $share_info['art_circle_id'] = $ArtCircle_insertId;
                        $share_insertId = $ArtCircleShareLogic->add($share_info);
                    }
                }
            }

            Util::jsonReturn([
                'status' => 1000,
                'id' => $ArticleLogic->getLastInsID()
            ]);
        }

        // Util::jsonReturn(['status'=>1000, 'faceUrl'=>00]);
    }

    public function getTodayArticle()
    {
        $ArticleLogic = new ArticleLogic();
        $time_from = strtotime(date('Y-m-d'));
        $time_end = $time_from + 86400;
        $article_draft = $ArticleLogic->where('artist=' . $this->loginUserId . ' and status=2 and create_time>=' . $time_from . ' and create_time<' . $time_end)->count();
        $article_publish = $ArticleLogic->where('artist=' . $this->loginUserId . ' and status=1 and create_time>=' . $time_from . ' and create_time<' . $time_end)->count();
        $article = [
            'draft' => $article_draft,
            'publish' => $article_publish
        ];
        Util::jsonReturn([
            'status' => Code::SUCCESS,
            'article' => $article
        ]);
    }

    public function like()
    {
        $this->checkLogin();

        $tokenInfo = Token::getTokenInfo($this->token);
        $id = Checker::numberId();

        $ArticleLogic = new ArticleLogic();
        $Articleinfo = $ArticleLogic->where([
            'id' => intval($id),
            'status' => 1
        ])->find();
        if (!$Articleinfo) {
            Util::jsonReturn(null, Code::SYS_ERR, '记录不存在');
        }

        $ArticleLikeLogic = new ArticleLikeLogic();
        $likeData = [
            'article_id' => $id,
            'like_user_id' => $this->loginUserId,
            'like_time' => time(),
            'is_like' => 1

        ];
        $likeId = $ArticleLikeLogic->like($likeData);
        if ($likeId) {
            $userLogic = new UserLogic(); // 实例化用户模块
            $userInfo = $userLogic->getUserInfoById($tokenInfo['userInfo']['id']); // 根据用户id获取用户信息
            $assetsLogic = new AssetsLogic(); // 获取用户头像
            $faceUrl = $assetsLogic->getUrl($userInfo['face']);
            Util::jsonReturn([
                'status' => 1000,
                'faceUrl' => $faceUrl
            ]);
        } else {
            // Util::jsonReturn(null, Code::SYS_ERR, '记录不存在，或者已经喜欢了');
            $userLogic = new UserLogic(); // 实例化用户模块
            $userInfo = $userLogic->getUserInfoById($tokenInfo['userInfo']['id']); // 根据用户id获取用户信息
            $assetsLogic = new AssetsLogic(); // 获取用户头像
            $faceUrl = $assetsLogic->getUrl($userInfo['face']);
            Util::jsonReturn([
                'status' => 1000,
                'faceUrl' => $faceUrl
            ]);
        }
    }

    public function unlike()
    {
        $this->checkLogin();

        $tokenInfo = Token::getTokenInfo($this->token);
        $id = Checker::numberId();

        $ArticleLogic = new ArticleLogic();
        $Articleinfo = $ArticleLogic->where([
            'id' => intval($id),
            'status' => 1
        ])->find();
        if (!$Articleinfo) {
            Util::jsonReturn(null, Code::SYS_ERR, '记录不存在');
        }

        $ArticleLikeLogic = new ArticleLikeLogic();
        $likeData = [
            'article_id' => $id,
            'like_user_id' => $this->loginUserId,
            'unlike_time' => time(),
            'is_like' => 0

        ];
        $likeresult = $ArticleLikeLogic->unlike($likeData);
        if ($likeresult) {
            $userLogic = new UserLogic(); // 实例化用户模块
            $userInfo = $userLogic->getUserInfoById($tokenInfo['userInfo']['id']); // 根据用户id获取用户信息
            $assetsLogic = new AssetsLogic(); // 获取用户头像
            $faceUrl = $assetsLogic->getUrl($userInfo['face']);
            Util::jsonReturn([
                'status' => 1000,
                'faceUrl' => $faceUrl
            ]);
        } else {
            // Util::jsonReturn(null, Code::SYS_ERR, '记录不存在');
            $userLogic = new UserLogic(); // 实例化用户模块
            $userInfo = $userLogic->getUserInfoById($tokenInfo['userInfo']['id']); // 根据用户id获取用户信息
            $assetsLogic = new AssetsLogic(); // 获取用户头像
            $faceUrl = $assetsLogic->getUrl($userInfo['face']);
            Util::jsonReturn([
                'status' => 1000,
                'faceUrl' => $faceUrl
            ]);
        }
    }

    public function getcontent___20170826()
    {
        $id = I('post.id', '', 'number_int');
        $ArticleLogic = new ArticleLogic();
        $articleinfo = $ArticleLogic->where("id=" . intval($id) . " and status=1")->find();
        if (!$articleinfo) {
            Util::jsonReturn(null, Code::SYS_ERR, '记录不存在');
        }
        $imgUrls = $ArticleLogic->getHtmlImgSrc($articleinfo['content']);
        $articleinfo['content'] = $ArticleLogic->replaceHtmlImgSrc($imgUrls, $articleinfo['content']);

        $info['article']['content'] = $articleinfo['content'];
        Util::jsonReturn([
            'status' => Code::SUCCESS,
            'info' => $info
        ]);
    }

    public function getdetail()
    {
        $id = I('post.id', '', 'number_int');
        $ArticleLogic = new ArticleLogic();
        $articleinfo = $ArticleLogic->where("id=" . intval($id) . " and status=1")->find();
        if (!$articleinfo) {
            Util::jsonReturn(null, Code::SYS_ERR, '记录不存在');
        }
        $ArticleLogic->where('id=' . intval($id))->setInc('views', 1);

        $userLogic = new UserLogic();
        $userinfo = $userLogic->where("id=" . $articleinfo['artist'])->find();

        $ArticleLike = M('ArticleLike')->where("article_id=" . intval($id) . " and like_user_id=" . intval($this->loginUserId) . " and is_like=1")->find();
        $UserFollowerLogic = new UserFollowerLogic();
        $UserFollower = $UserFollowerLogic->field('id')
            ->where("follower=" . intval($this->loginUserId) . " and user_id=" . $articleinfo['artist'] . " and is_follow='Y'")
            ->find();
        // echo $UserFollowerLogic->getLastSql();exit;
        // $article['id'] = $articleinfo['id'];

        $article['is_repay'] = $articleinfo['artist'] == $this->loginUserId ? 1 : 0;
        $article['title'] = $articleinfo['title'];
        $article['like_count'] = $articleinfo['like_count'];
        $article['create_time'] = date('Y-m-d', $articleinfo['create_time']);
        $article['views'] = $articleinfo['views'];
        $article['is_like'] = $ArticleLike ? 1 : 0;
        $article['follow_user'] = $UserFollower ? 1 : 0;
        $article['html5_url'] = C('m_site') . '/article/content/' . $id;

        $article['userinfo'] = [
            "id" => $userinfo['id'],
            "nickname" => $userinfo['nickname'],
            "faceUrl" => $userinfo['face'],
            'gender' => $userinfo['gender'],
            'motto' => $userinfo['motto'],
            'category' => $this->get_user_category($userinfo['id']),
            "is_artist" => strpos(',' . $userinfo['role'] . ',', ',artist,') !== false ? 1 : 0,
            "is_agency" => strpos(',' . $userinfo['role'] . ',', ',agency,') !== false ? 1 : 0,
            "is_planner" => strpos(',' . $userinfo['role'] . ',', ',planner,') !== false ? 1 : 0
        ];

        $ArticleLike_list = M('ArticleLike')->field('az_user.face')
            ->join('az_user on az_article_like.like_user_id=az_user.id')
            ->where("az_article_like.article_id=" . intval($id))
            ->order('az_article_like.id desc')
            ->limit(10)
            ->select();

        $article['like_users'] = [];
        foreach ($ArticleLike_list as $value) {
            $article['like_users'][] = $value['face'] . '?x-oss-process=image/resize,m_fixed,h_180,w_180';
        }

        // 获取里面的图片
        preg_match_all('/<img.*?src="(.*?)".*?>/is', $articleinfo['content'], $array);
        $article['images'] = empty($array[1]) ? [] : self::thumbnails($array[1]);

        // 获取里面的视频
        preg_match_all('/<video.*?poster="(.*?)".*?>/is', $articleinfo['content'], $match);
        $article['video'] = empty($match[1]) ? '' : $match[1][0];

        $ArticleComment_count = M('ArticleComment')->where("topic_id=" . intval($id) . " and parent_id=0 and status=1")->count();
        $ArticleComment_list = M('ArticleComment')->field('az_article_comment.id,az_article_comment.commenter as artist,az_user.face,az_user.nickname,az_user.gender
            ,az_article_comment.create_time,az_article_comment.content,az_article_comment.like_total')
            ->join('az_user on az_article_comment.commenter=az_user.id')
            ->where("az_article_comment.topic_id=" . intval($id) . " and az_article_comment.parent_id=0 and az_article_comment.status=1")
            ->order('az_article_comment.id desc')
            ->limit(5)
            ->select();

        $comments = [];
        foreach ($ArticleComment_list as $value) {
            $repayinfo = M('ArticleComment')->field('az_article_comment.id,az_article_comment.commenter as artist,az_user.face,az_user.nickname,az_user.gender
            ,az_article_comment.create_time,az_article_comment.content,az_article_comment.like_total')
                ->join('az_user on az_article_comment.commenter=az_user.id')
                ->where("az_article_comment.topic_id=" . intval($id) . " and az_article_comment.parent_id=" . $value['id'] . " and az_article_comment.status=1")
                ->find();
            $ArticleCommentLike = M('ArticleCommentLike')->where("comment_id=" . intval($value['id']) . " and liker=" . intval($this->loginUserId) . " ")->find();

            if ($repayinfo) {
                $value['repayer'] = $repayinfo['nickname'];
                $value['repayContent'] = $repayinfo['content'];
                $value['repayTime'] = $repayinfo['create_time'];
            }
            $comments[] = [
                'commentId' => $value['id'],
                'artist' => $value['artist'],
                'faceUrl' => $value['face'] . '?x-oss-process=image/resize,m_fixed,h_180,w_180',
                'nickname' => $value['nickname'],
                'gender' => $value['gender'],
                'time' => date('Y-m-d', $value['create_time']),
                'content' => $value['content'],
                "isLike" => $ArticleCommentLike ? 'Y' : 'N',
                'repayer' => trim($value['repayer']) == '' ? '' : $value['repayer'],
                'repayContent' => trim($value['repayContent']) == '' ? '' : $value['repayContent'],
                'repayTime' => $value['repayTime'] ? date('Y-m-d', $value['repayTime']) : '',
                'likes' => $value['like_total'],
                'isRepay' => $repayinfo ? 1 : 0

            ];
        }

        $article['comments'] = [
            'total' => $ArticleComment_count,
            'commentlist' => $comments
        ];

        // 相关推荐
        $where = 'az_article.artist=' . $articleinfo['artist'] . ' and az_article.id!=' . intval($id) . ' and az_article.status=1';
        $total = $ArticleLogic->where($where)->count();

        if ($total) {

            $list = $ArticleLogic->field('az_article.cover,az_user.gender,az_article.id,az_article.artist,az_article.title,az_article.excerpt,az_article.like_count,az_article.content,az_user.nickname,az_user.face,az_user.role')
                ->join('az_user on az_article.artist=az_user.id', 'left')
                ->where($where)
                ->order('id desc')
                ->limit(5)
                ->select();
        } else {
            $where = 'az_article.id!=' . intval($id) . ' and az_article.status=1';
            $list = $ArticleLogic->field('az_article.cover,az_user.gender,az_article.id,az_article.artist,az_article.title,az_article.excerpt,az_article.like_count,az_article.content,az_user.nickname,az_user.face,az_user.role')
                ->join('az_user on az_article.artist=az_user.id', 'left')
                ->where($where)
                ->order('id desc')
                ->limit(5)
                ->select();
        }

        $article_ids = []; // 文章id列表
        foreach ($list as $value) {
            array_push($article_ids, $value['id']);
        }

        $like_list = []; // 用户点赞列表
        if (count($article_ids) && $this->loginUserId > 0) { // 查询登录用户的点赞列表
            $ArticleLike_list = M('ArticleLike')->where("article_id in (" . implode(',', $article_ids) . ") and like_user_id=" . intval($this->loginUserId) . " and is_like=1")->select();
        }
        foreach ($ArticleLike_list as $like) {
            $like_list[$like['article_id']] = 1;
        }

        $related_articles = [];
        foreach ($list as $value) {
            $related_article['id'] = $value['id'];
            $related_article['cover'] = Util::getImageResize($value['cover'], 300, 300);
            $related_article['title'] = $value['title'];
            $related_article['content'] = $this->article_content_cut(strip_tags($value['content']), 70);

            $related_articles[] = $related_article;
        }
        $article['related'] = $related_articles;
        $article['shareInfo'] = [
            'shareTitle' => $articleinfo['title'],
            'shareDesc' => $articleinfo['excerpt'],
            'shareImg' => Util::getFillImage(Util::getImgUrlById($articleinfo['cover']), Image::faceWidth, Image::faceHeight),
            'shareLink' => C('m_site') . '/article/detail/' . $id
        ];

        Util::jsonReturn([
            'status' => Code::SUCCESS,
            'info' => $article
        ]);
    }

    // app 艺术号详情 分享
    public function getdetailSimple()
    {
        $id = I('post.id', '', 'number_int');
        $ArticleLogic = new ArticleLogic();
        $articleinfo = $ArticleLogic->where("id=" . intval($id) . " and status=1")->find();
        if (!$articleinfo) {
            Util::jsonReturn(null, Code::SYS_ERR, '记录不存在');
        }
        $ArticleLogic->where('id=' . intval($id))->setInc('views', 1);

        $userLogic = new UserLogic();
        $userinfo = $userLogic->where("id=" . $articleinfo['artist'])->find();

        $ArticleLike = M('ArticleLike')->where("article_id=" . intval($id) . " and like_user_id=" . intval($this->loginUserId) . " and is_like=1")->find();

        $article['title'] = $articleinfo['title'];
        $article['like_count'] = $articleinfo['like_count'];
        $article['create_time'] = date('Y-m-d', $articleinfo['create_time']);
        $article['views'] = $articleinfo['views'];
        $article['is_like'] = $ArticleLike ? 1 : 0;
        $article['uname'] = $userinfo['nickname'];

        // 获取里面的图片
        preg_match_all('/<img.*?src="(.*?)".*?>/is', html_entity_decode($articleinfo['content'], ENT_QUOTES), $array);
        $article['images'] = empty($array[1]) ? [] : self::thumbnails($array[1]);

        // 获取里面的视频
        preg_match_all('/<video.*?poster="(.*?)".*?>/is', html_entity_decode($articleinfo['content'], ENT_QUOTES), $match);
        $article['video'] = empty($match[1]) ? '' : $match[1][0];

        if (empty($articleinfo['cover'])) {
            if (empty($article['video'])) {
                $articleCover = empty($array[1]) ? '' : $array[1][0];
            } else {
                $articleCover = $article['video'];
            }
        } else {
            $articleCover = $articleinfo['cover'];
        }

        $ArticleComment_count = M('ArticleComment')->where("topic_id=" . intval($id) . " and parent_id=0 and status=1")->count();

        $article['comments'] = [
            'total' => $ArticleComment_count
        ];

        $article['shareInfo'] = [
            'shareTitle' => $articleinfo['title'],
            'shareDesc' => $articleinfo['excerpt'],
            'shareImg' => Util::getFillImage(Util::getImgUrlById($articleCover), Image::faceWidth, Image::faceHeight),
            'shareLink' => C('m_site') . '/article/detail/' . $id
        ];

        Util::jsonReturn([
            'status' => Code::SUCCESS,
            'info' => $article
        ]);
    }

    public function getdetailH5()
    {
        $id = I('post.id', '', 'number_int');
        $ArticleLogic = new ArticleLogic();
        $articleinfo = $ArticleLogic->where("id=" . intval($id) . " and status=1")->find();
        if (!$articleinfo) {
            Util::jsonReturn(null, Code::SYS_ERR, '记录不存在');
        }
        $ArticleLogic->where('id=' . intval($id))->setInc('views', 1);

        $userLogic = new UserLogic();
        $userinfo = $userLogic->where("id=" . $articleinfo['artist'])->find();

        $ArticleLike = M('ArticleLike')->where("article_id=" . intval($id) . " and like_user_id=" . intval($this->loginUserId) . " and is_like=1")->find();
        $UserFollowerLogic = new UserFollowerLogic();
        $UserFollower = $UserFollowerLogic->field('id')
            ->where("follower=" . intval($this->loginUserId) . " and user_id=" . $articleinfo['artist'] . " and is_follow='Y'")
            ->find();
        // echo $UserFollowerLogic->getLastSql();exit;
        // $article['id'] = $articleinfo['id'];

        $imgUrls = $ArticleLogic->getHtmlImgSrc(html_entity_decode($articleinfo['content'], ENT_QUOTES));
        $article_content = $ArticleLogic->replaceHtmlImgSrc($imgUrls, html_entity_decode($articleinfo['content'], ENT_QUOTES));

        $article['is_repay'] = $articleinfo['artist'] == $this->loginUserId ? 1 : 0;
        $article['title'] = $articleinfo['title'];
        $article['content'] = $article_content;
        $article['like_count'] = $articleinfo['like_count'];
        $article['create_time'] = date('Y-m-d', $articleinfo['create_time']);
        $article['views'] = $articleinfo['views'];
        $article['is_like'] = $ArticleLike ? 1 : 0;
        $article['follow_user'] = $UserFollower ? 1 : 0;
        $article['html5_url'] = C('m_site') . '/article/content/' . $id;

        $AgencyType = $userLogic->getAgencyType($articleinfo['artist']);
        $article['userinfo'] = [
            "id" => $userinfo['id'],
            "nickname" => $userinfo['nickname'],
            "faceUrl" => $userinfo['face'],
            'gender' => $userinfo['gender'],
            'motto' => $userinfo['motto'],
            'category' => $this->get_user_category($userinfo['id']),
            "is_artist" => strpos(',' . $userinfo['role'] . ',', ',artist,') !== false ? 1 : 0,
            "is_agency" => $AgencyType > 0 ? 1 : 0,
            'AgencyType' => $AgencyType,
            "is_planner" => strpos(',' . $userinfo['role'] . ',', ',planner,') !== false ? 1 : 0
        ];

        $ArticleLike_list = M('ArticleLike')->field('az_user.face')
            ->join('az_user on az_article_like.like_user_id=az_user.id')
            ->where("az_article_like.article_id=" . intval($id))
            ->order('az_article_like.id desc')
            ->limit(10)
            ->select();

        $article['like_users'] = [];
        foreach ($ArticleLike_list as $value) {
            $article['like_users'][] = $value['face'] . '?x-oss-process=image/resize,m_fixed,h_180,w_180';
        }

        // 获取里面的图片
        preg_match_all('/<img.*?src="(.*?)".*?>/is', $articleinfo['content'], $array);
        $article['images'] = empty($array[1]) ? [] : self::thumbnails($array[1]);

        // 获取里面的视频
        preg_match_all('/<video.*?poster="(.*?)".*?>/is', $articleinfo['content'], $match);
        $article['video'] = empty($match[1]) ? '' : $match[1][0];

        $ArticleComment_count = M('ArticleComment')->where("topic_id=" . intval($id) . " and parent_id=0 and status=1")->count();
        $ArticleComment_list = M('ArticleComment')->field('az_article_comment.id,az_article_comment.commenter as artist,az_user.face,az_user.nickname,az_user.gender
            ,az_article_comment.create_time,az_article_comment.content,az_article_comment.like_total')
            ->join('az_user on az_article_comment.commenter=az_user.id')
            ->where("az_article_comment.topic_id=" . intval($id) . " and az_article_comment.parent_id=0 and az_article_comment.status=1")
            ->order('az_article_comment.id desc')
            ->limit(5)
            ->select();

        $comments = [];
        foreach ($ArticleComment_list as $value) {
            $repayinfo = M('ArticleComment')->field('az_article_comment.id,az_article_comment.commenter as artist,az_user.face,az_user.nickname,az_user.gender
            ,az_article_comment.create_time,az_article_comment.content,az_article_comment.like_total')
                ->join('az_user on az_article_comment.commenter=az_user.id')
                ->where("az_article_comment.topic_id=" . intval($id) . " and az_article_comment.parent_id=" . $value['id'] . " and az_article_comment.status=1")
                ->find();
            $ArticleCommentLike = M('ArticleCommentLike')->where("comment_id=" . intval($value['id']) . " and liker=" . intval($this->loginUserId) . " ")->find();

            if ($repayinfo) {
                $value['repayer'] = $repayinfo['nickname'];
                $value['repayContent'] = $repayinfo['content'];
                $value['repayTime'] = $repayinfo['create_time'];
            }
            $comments[] = [
                'commentId' => $value['id'],
                'artist' => $value['artist'],
                'faceUrl' => $value['face'] . '?x-oss-process=image/resize,m_fixed,h_180,w_180',
                'nickname' => $value['nickname'],
                'gender' => $value['gender'],
                'time' => date('Y-m-d', $value['create_time']),
                'content' => $value['content'],
                "isLike" => $ArticleCommentLike ? 'Y' : 'N',
                'repayer' => trim($value['repayer']) == '' ? '' : $value['repayer'],
                'repayContent' => trim($value['repayContent']) == '' ? '' : $value['repayContent'],
                'repayTime' => $value['repayTime'] ? date('Y-m-d', $value['repayTime']) : '',
                'likes' => $value['like_total'],
                'isRepay' => $repayinfo ? 1 : 0

            ];
        }

        $article['comments'] = [
            'total' => $ArticleComment_count,
            'commentlist' => $comments
        ];

        // 相关推荐
        $where = 'az_article.artist=' . $articleinfo['artist'] . ' and az_article.id!=' . intval($id) . ' and az_article.status=1';
        $total = $ArticleLogic->where($where)->count();

        if ($total) {

            $list = $ArticleLogic->field('az_article.cover,az_user.gender,az_article.id,az_article.artist,az_article.title,az_article.excerpt,az_article.like_count,az_article.content,az_user.nickname,az_user.face,az_user.role')
                ->join('az_user on az_article.artist=az_user.id', 'left')
                ->where($where)
                ->order('id desc')
                ->limit(5)
                ->select();
        } else {
            $where = 'az_article.id!=' . intval($id) . ' and az_article.status=1';
            $list = $ArticleLogic->field('az_article.cover,az_user.gender,az_article.id,az_article.artist,az_article.title,az_article.excerpt,az_article.like_count,az_article.content,az_user.nickname,az_user.face,az_user.role')
                ->join('az_user on az_article.artist=az_user.id', 'left')
                ->where($where)
                ->order('id desc')
                ->limit(5)
                ->select();
        }

        $article_ids = []; // 文章id列表
        foreach ($list as $value) {
            array_push($article_ids, $value['id']);
        }

        $like_list = []; // 用户点赞列表
        if (count($article_ids) && $this->loginUserId > 0) { // 查询登录用户的点赞列表
            $ArticleLike_list = M('ArticleLike')->where("article_id in (" . implode(',', $article_ids) . ") and like_user_id=" . intval($this->loginUserId) . " and is_like=1")->select();
        }
        foreach ($ArticleLike_list as $like) {
            $like_list[$like['article_id']] = 1;
        }

        $related_articles = [];
        foreach ($list as $value) {
            $related_article['id'] = $value['id'];
            $related_article['cover'] = Util::getImageResize($value['cover'], 300, 300);
            $related_article['title'] = $value['title'];
            $related_article['content'] = $this->article_content_cut(strip_tags($value['content']), 70);

            $related_articles[] = $related_article;
        }
        $article['related'] = $related_articles;
        $article['shareInfo'] = [
            'shareTitle' => $articleinfo['title'],
            'shareDesc' => $articleinfo['excerpt'],
            'shareImg' => Util::getFillImage(Util::getImgUrlById($articleinfo['cover']), Image::faceWidth, Image::faceHeight),
            'shareLink' => C('m_site') . '/article/detail/' . $id
        ];

        Util::jsonReturn([
            'status' => Code::SUCCESS,
            'info' => $article
        ]);
    }

    public function getmyarticlelist()
    {
        $this->checkLogin();

        $page = I('post.page', '', 'number_int');
        $pagesize = I('post.pagesize', '', 'number_int');

        $page = $page <= 0 ? 1 : $page;
        $pagesize = $pagesize <= 0 ? 20 : $pagesize;
        $pagesize = $pagesize > 200 ? 20 : $pagesize;

        $ArticleLogic = new ArticleLogic();

        $where = 'az_article.artist=' . $this->loginUserId . ' and az_article.status!=0';
        $total = $ArticleLogic->where($where)->count();

        $list = $ArticleLogic->field('az_article.publish_time,az_article.create_time,az_article.status,az_article.modified_time,az_article.id,az_article.cover,az_article.artist,az_article.title,az_article.excerpt,az_article.like_count,az_article.content,az_user.nickname,az_user.face,az_user.role')
            ->join('az_user on az_article.artist=az_user.id', 'left')
            ->where($where)
            ->order('id desc')
            ->page($page, $pagesize)
            ->select();

        $article_ids = []; // 文章id列表
        foreach ($list as $value) {
            array_push($article_ids, $value['id']);
        }

        $like_list = []; // 用户点赞列表
        if (count($article_ids) && $this->loginUserId > 0) { // 查询登录用户的点赞列表
            $ArticleLike_list = M('ArticleLike')->where("article_id in (" . implode(',', $article_ids) . ") and like_user_id=" . intval($this->loginUserId) . " and is_like=1")->select();
        }
        foreach ($ArticleLike_list as $like) {
            $like_list[$like['article_id']] = 1;
        }

        $articles = [];
        foreach ($list as $value) {
            $article['id'] = $value['id'];
            $article['type'] = $value['status'];
            $article['cover'] = trim($value['cover']);
            $article['title'] = $value['title'];
            $article['excerpt'] = $value['excerpt'];
            $article['like_count'] = $value['like_count'];
            $article['is_like'] = $like_list[$value['id']] == 1 ? 1 : 0;
            $article['isEdit'] = 'Y';
            $article['last_update_time'] = date('Y-m-d H:i', $value['modified_time']);
            $article['create_time'] = date('Y-m-d H:i', $value['create_time']);
            $article['publish_time'] = date('Y-m-d H:i', $value['publish_time']);
            // 获取里面的图片
            preg_match_all('/<img.*?src="(.*?)".*?>/is', $value['content'], $array);
            $article['images'] = empty($array[1]) ? [] : Util::getImageResizes($array[1], 300, 300);

            // 获取里面的视频
            preg_match_all('/<video.*?poster="(.*?)".*?>/is', $value['content'], $match);
            $article['video'] = empty($match[1]) ? '' : $match[1][0];

            $article['user'] = [
                "id" => $value['artist'],
                "nickname" => $value['nickname'],
                "faceUrl" => $value['face'],
                "is_artist" => strpos(',' . $value['role'] . ',', ',artist,') !== false ? 1 : 0,
                "is_agency" => strpos(',' . $value['role'] . ',', ',agency,') !== false ? 1 : 0,
                "is_planner" => strpos(',' . $value['role'] . ',', ',planner,') !== false ? 1 : 0
            ];

            $articles[] = $article; // 添加进articles
        }

        $maxpage = intval($total / $pagesize) < ($total / $pagesize) ? intval($total / $pagesize) + 1 : intval($total / $pagesize);
        $info = [
            'articles' => $articles,
            'page' => $page,
            'total' => $total,
            'pagesize' => $pagesize,
            'maxpage' => $maxpage
        ];

        Util::jsonReturn([
            'status' => Code::SUCCESS,
            'info' => $info
        ]);
    }

    public function getmyarticle()
    {
        $this->checkLogin();

        $id = I('post.id', '', 'number_int');
        $ArticleLogic = new ArticleLogic();
        $articleinfo = $ArticleLogic->where("id=" . intval($id) . " and artist=" . $this->loginUserId . " and status!=0")->find();
        if (!$articleinfo) {
            Util::jsonReturn(null, Code::SYS_ERR, '记录不存在');
        }
        $tags=$ArticleLogic->get_tag_names($articleinfo['tag']);
        if ($tags == '') {
            $tag_list = [];
        } else {
            $tag_list = explode(',', $tags);
        }
        $articleinfo = [
            'id' => $id,
            'type' => $articleinfo['status'],
            'title' => $articleinfo['title'],
            'tag'=>$tag_list,
            'excerpt' => $articleinfo['excerpt'],
            'content' => html_entity_decode($articleinfo['content'], ENT_QUOTES),
            'cover' => trim($articleinfo['cover']),
            'last_update_time' => date('Y-m-d', $articleinfo['modified_time']),
            'publish_time'=>date('Y-m-d H:i', $articleinfo['publish_time']),
        ];

        $info = $articleinfo;

        Util::jsonReturn([
            'status' => Code::SUCCESS,
            'info' => $info
        ]);
    }

    private function get_user_category($artist)
    { // 获取用户作品分类
        $ArtworkLogic = new ArtworkLogic();
        $ArtworkCategoryLogic = new ArtworkCategoryLogic();
        $categorys = $ArtworkLogic->field('category')
            ->where("artist=" . intval($artist) . " and is_deleted='N'")
            ->select();
        $categorys_str = '';
        foreach ($categorys as $value) {
            $categorys_str = $categorys_str . ',' . $value['category'];
        }
        $categorys_arr = explode(',', $categorys_str);
        $categorys_arr = array_filter($categorys_arr);
        $categorys_arr = array_unique($categorys_arr);
        if (count($categorys_arr)) {
            $categorys = $ArtworkCategoryLogic->field('cn_name')
                ->where('id in (' . implode(',', $categorys_arr) . ')')
                ->select();
            $cat_name = '';
            foreach ($categorys as $value) {
                $cat_name = $cat_name == '' ? $value['cn_name'] : $cat_name . '/' . $value['cn_name'];
            }
            return $cat_name;
        } else {
            return '';
        }
    }

    public function ddddd()
    {
        // $AliyunMts = new AliyunMts();
        // $screenshot_result = $AliyunMts->screenshot('2017/08/21/13/2994888147bdb2eda501b78cb3ec8de3.MP4', '2017/08/21/13/2994888147bdb2eda501b78cb3ec8de3.jpg');
        // if ($screenshot_result->State != 'Fail') {
        // echo 111;
        // }
    }

    private function html_insert_video_screenshot($str)
    {
        $artzhe_oss = 'https://artzhe.oss-cn-shenzhen.aliyuncs.com/';
        $html = str_get_html($str);
        foreach ($html->find('video') as $video) {
            if (trim($video->poster) != '') {
                continue;
            }
            $i = 0;
            $poster = '';
            foreach ($video->find('source') as $source) {
                if ($i > 0) {
                    continue;
                }
                if (trim($source->src) != '') {
                    $pos = strpos(trim($source->src), $artzhe_oss);
                    if ($pos === false) {
                        continue;
                    }
                    $video_src = trim($source->src);
                    $video_src_path = str_replace($artzhe_oss, "", $video_src); // 视频保存路径
                    $pos = strripos($video_src_path, '.');
                    if ($pos !== false) {
                        $screenshot_src_path = substr($video_src_path, 0, $pos) . '_screenshot.jpg'; // 视频截图保存路径
                    } else {
                        $screenshot_src_path = $video_src_path . '_screenshot.jpg';
                    }
                    $AliyunMts = new AliyunMts();
                    $screenshot_result = $AliyunMts->screenshot($video_src_path, $screenshot_src_path); // 截图

                    if ($screenshot_result->State == 'Success') {
                        $poster = $artzhe_oss . $screenshot_src_path;
                    }
                }
                $i++;
            }
            if ($poster != '') {
                $video->poster = $poster;
            }
        }
        return $html->__toString();
    }

    private function article_content_cut($content, $len = 20)
    {
        $content = trim($content);
        if (mb_strlen($content) <= $len) {
            return $content;
        } else {
            return rtrim(mb_substr($content, 0, $len)) . '...';
        }
    }

    private static function thumbnails($images)
    { // 加水印，质量压缩
        foreach ($images as $key => $image) {
            $obj = Util::waterObject($image);
            $images[$key] = $image . '?x-oss-process=image/watermark,image_' . $obj . ',t_50,g_se,x_10,y_10/quality,q_50';
        }
        return $images;
    }
}