<?php

namespace Admin\Controller;


use Common\Base\AdminBaseController;
use Custom\Helper\Util;
use Custom\Helper\Oss;
use Custom\Helper\Nav;

//艺术家-推荐艺术号
class RecommendArticleController extends AdminBaseController
{
    //推荐艺术号列表
    public function index()
    {
        $nickname = I('get.nickname');
        $content = I('get.content');
        $title = I('get.title');
        $sdate = I('get.sdate');  //开始时间
        $edate = I('get.edate');  //结束时间
        $page = I('get.page', '1');
        $perPageCount = I('get.perPageCount', '6');

        if(!empty($nickname) || !empty($content) || !empty($title) || !empty($sdate) || !empty($edate)){//搜索艺术号
            $type = 0;//搜索
            $where = "status=1";
            if (trim($nickname) != '') {
                $where = $where . " and az_user.nickname like '%" . addslashes(trim($nickname)) . "%'";
            }
            if (trim($title) != '') {
                $where = $where . " and az_article.title like '%" . addslashes(trim($title)) . "%'";
            }
            if (trim($content) != '') {
                $where = $where . " and az_article.content like '%" . addslashes(trim($content)) . "%'";
            }
            if ($this->checkDateFormat($sdate)) {
                if(strtotime($sdate)){
                    $where = $where . " and az_article.publish_time>=" . strtotime($sdate);
                }
            }
            if ($this->checkDateFormat($edate)) {
                if(strtotime($edate)){
                    $edate_time = strtotime($edate) + 86400;
                    $where = $where . " and az_article.publish_time<=" . $edate_time;
                }
            }
            $list = M('article')
                ->field('az_article.id,az_article.title,az_article.artist,az_user.nickname,az_article.publish_time')
                ->join('az_user on az_user.id=az_article.artist','left')
                ->where($where)
                ->page($page,$perPageCount)
                ->select();
            $totalCount = M('article')
                ->join('az_user on az_user.id=az_article.artist','left')
                ->where($where)
                ->count();
        }else{//显示推荐艺术号
            $type = 1;//推荐
            $where=[];
            $list = M('recommend_article')
                ->field('az_recommend_article.id as recommend_id,az_recommend_article.sort,az_article.id,az_article.title,az_article.artist,az_user.nickname,az_article.publish_time')
                ->join('az_article on az_article.id=az_recommend_article.article_id', 'left')
                ->join('az_user on az_article.artist=az_user.id', 'left')
                ->order('sort')
                ->page($page, $perPageCount)
                ->select();
            $totalCount = M('recommend_article')->count();
        }

        //已推荐艺术号id
        $recommendArtist = M('recommend_article')->field('article_id')->select();
        $recommendArtistIds = array_column($recommendArtist,'article_id');
        foreach ($list as $key => $value) {
            if(in_array($value['id'],$recommendArtistIds)){//已推荐
                $list[$key]['type'] = 1;
            }else{//未推荐
                $list[$key]['type'] = 0;
            }
        }

        $queryParam=[
            'nickname'=>$nickname,
            'content'=>$content,
            'title'=>$title,
            'sdate'=>$sdate,
            'edate'=>$edate,
        ];

        $nav = Nav::render(U('Admin/RecommendArticle/index'), $queryParam, $page, $perPageCount, $totalCount);
        $this->assign('nav', $nav);
        $this->assign('lists', $list);
        $this->assign('type', $type);
        $this->assign('queryParam', $queryParam);
        $this->display('index');
    }


    //修改序号
    public function updateSort(){
        $id = intval(trim(I('post.id')));  //id
        $sort = intval(trim(I('post.sort')));  //序号
        $where['id'] = $id;
        $data['sort'] = $sort;
        $insertId = M('recommend_article')->where(['id'=>$id])->save($data);
        if ($insertId) {
            $response = ['error' => 0, 'message' => 'OK'];
            echo json_encode($response);
        } else {
            $response = ['error' => 1, 'message' => '更新失败，请重试'];
            echo json_encode($response);
        }


    }

    //艺术号详情
    public function detail()
    {
        $id = I('get.id', '', 'number_int');
        $articleinfo = M('article')->where(['id'=>intval($id)])->find();
        if(!empty($articleinfo['artist'])){
            $userinfo = M('user')->where("id=" . $articleinfo['artist'])->find();
            $article['artist'] = $userinfo['nickname'];
        }else{
            $article['artist'] = '/';
        }


        $article['title'] = $articleinfo['title'];
        $article['create_time'] = date('Y-m-d', $articleinfo['create_time']);
        $article['views'] = $articleinfo['views'];
        $article['like_count'] = $articleinfo['like_count'];
        $article['comment_count'] = $articleinfo['comment_count'];
        $article['publish_time'] = $articleinfo['publish_time'];


        //获取里面的图片
        preg_match_all('/<img.*?src="(.*?)".*?>/is', $articleinfo['content'], $array);
        $article['images'] = empty($array[1]) ? [] : self::thumbnails($array[1]);

        //获取里面的视频
        preg_match_all('/<video.*?poster="(.*?)".*?>/is', $articleinfo['content'], $match);
        $article['video'] = empty($match[1]) ? '' : $match[1][0];
        $article['content'] = $articleinfo['content'];
        $this->assign('subinfo', $article);
        $this->display();

    }

    //推荐艺术号
    public function recommend()
    {
        $id = intval(trim(I('post.id')));  //id
        $where['id'] = $id;
        $article = M('article')->where($where)->find();
        $recommendArticle = M('recommend_article')->where(['article_id' => $id])->find();
        if(empty($article)){
            $response = ['error' => 0, 'message' => '参数错误'];
            echo json_encode($response);
        }elseif(!empty($recommendArticle)){
            $response = ['error' => 1, 'message' => '该文章已经推荐'];
            echo json_encode($response);
        }else{
            $insertId = M('recommend_article')->add(['article_id'=>$id]);
            if ($insertId) {
                $response = ['error' => 0, 'message' => 'OK'];
                echo json_encode($response);
            } else {
                $response = ['error' => 1, 'message' => '推荐失败，请重试'];
                echo json_encode($response);
            }
        }

    }

    //取消推荐艺术号
    public function cancelRecommend()
    {
        $ids = I('post.id');
        if(!is_array($ids)){//单个id转化成数组
            $ids=[intval($ids)];
        }else{
            foreach($ids as $key => $value)
            {
                $ids[$key]=intval($value);
            }
        }

        if(empty($ids)){
            $response = ['error' => 0, 'message' => '参数错误'];
            echo json_encode($response);
        }else{
            $insertId = M('recommend_article')->where(['article_id'=>['in',$ids]])->delete();
            if ($insertId) {
                $response = ['error' => 0, 'message' => 'OK'];
                echo json_encode($response);
            } else {
                $response = ['error' => 1, 'message' => '操作失败或作品已经取消推荐'];
                echo json_encode($response);
            }
        }

    }

    protected function checkDateFormat($date)
    {
        if (preg_match("/^([0-9]{4})-([0-9]{2})-([0-9]{2})$/", $date, $parts)) {
            if (checkdate($parts[2], $parts[3], $parts[1])) {
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

}
