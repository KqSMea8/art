<?php

namespace V20\Logic;

use V20\Base\BaseLogic;
use Custom\Helper\Util;

use V20\Model\ArtworkTagModel;
use V20\Logic\UserLogic;
use V20\Logic\ArtworkUpdateLogic;
use V20\Logic\CommentLogic;
use V20\Logic\ArtworkCategoryLogic;
use Custom\Define\Image;
use V20\Logic\RecommendLogic;

class ArtworkLogic extends BaseLogic
{
    //获取艺术家标签列表
    public  function getArtistCategoryList($artistIdList)
    {
        $list = $this->model->where(['artist'=>['in', $artistIdList], 'is_deleted'=>'N'])
            ->field('DISTINCT artist,category')
            ->select();
        if (empty($list)) {
            return [];
        }
        $result = [];
        foreach ($list as $value)
        {
            $result[$value['artist']][] = $value['category'];
        }
        return $result;
    }
    //获取最近的$x幅画
    public  function getLatestXArtworkList($userIdList, $x)
    {
        $x = (int)$x;
        if ($x<1) {
            return [];
        }
        $assetsLogic = new AssetsLogic();
        $results = [];
        foreach ($userIdList as $userId) {
            $list = $this->model->where(['artist'=>$userId, 'is_deleted'=>'N'])
                ->order('create_time DESC, last_update_time DESC')
                ->limit($x)
                ->getField('id,panorama_ids');
            $panoramaUrlList = $assetsLogic->getUrlList(array_values($list));
            foreach ($list as $id => &$artwork) {
                $artwork['panoramaUrl'] = $panoramaUrlList[$id];
            }
            if (empty($list)) {
                $list = [];
            }
            $results[$userId] = $list;
        }
        return $results;
    }
    public function showArtworkListByPage( $artistId, $page = 1, $perPageNumber = 1,$uid=0)
    {
        $result = $this->getArtworkListByPage( $artistId, $page, $perPageNumber,$uid);
        Util::jsonReturn(['status'=>1000, 'info'=>$result]);
    }
    public function showArtworkListByPage2( $artistId, $page = 1, $perPageNumber = 1)
    {
        $result = $this->getArtworkListByPage2( $artistId, $page, $perPageNumber);
        Util::jsonReturn(['status'=>1000, 'info'=>$result]);
    }
    public function getArtworkListByPage( $artistId, $page = 1, $perPageNumber = 1, $uid = 0)
    {
        //封面图
        //名称
        //更新次数
        //浏览次数
        //被喜欢次数
        //描述
        if($uid > 0 && $artistId==$uid ){
            //仅自己可见的画廊
            $artworkList = $this->model
                ->where(['artist'=>$artistId,'is_deleted'=>'N', ['update_times'=>['gt',0]]])
                ->field('id,name,update_times AS updateTimes,shape,length,width,diameter,category,cover,panorama_ids,story,last_update_time,
            is_finished AS isFinished, like_total AS likeTotal, view_total AS viewTotal')
                ->page($page, $perPageNumber)
                ->order('last_update_time DESC')
                ->select();
        }else{
            $artworkList = $this->model
                ->where(['artist'=>$artistId,'is_deleted'=>'N', ['update_times'=>['gt',0]],'state'=>1])
                ->field('id,name,update_times AS updateTimes,shape,length,width,diameter,category,cover,panorama_ids,story,last_update_time,
            is_finished AS isFinished, like_total AS likeTotal, view_total AS viewTotal')
                ->page($page, $perPageNumber)
                ->order('last_update_time DESC')
                ->select();
        }
        if (empty($artworkList)) {
            return [];
        }
        $assetsLogic = new AssetsLogic();
        foreach ($artworkList as &$artwork) {
            if(trim($artwork['panorama_ids'])!=''){//有全局图就不显示封面
                $images = explode(',',$artwork['panorama_ids']);
                $img=$images[0];
            }else{
                $img = $artwork['cover'];
            }

            $catid = $artwork['category'];
            unset($artwork['category']);
            $info = M('ArtworkCategory')->field('cn_name')->find($catid);
            $artwork['category_name'] = $info['cn_name'];
            $artwork['coverUrl'] = Util::getImageResize($img,Image::artworkDetailListWidth,Image::artworkDetailListHeight);
            unset($artwork['cover']);
            $artwork['last_update_time'] = date('Y-m-d H:i',$artwork['last_update_time']);
        }

        return $artworkList;
    }
    public function getArtworkListByPage2( $artistId, $page = 1, $perPageNumber = 1)
    {
        //封面图
        //名称
        //更新次数
        //浏览次数
        //被喜欢次数
        //描述
        $artworkList = $this->model
            ->where(['artist'=>$artistId,'is_deleted'=>'N', ['update_times'=>['gt',0]] , 'state'=>1])
            ->field('id,name,update_times AS updateTimes,shape,length,width,diameter,category,cover,story,last_update_time,
            is_finished AS isFinished, like_total AS likeTotal, view_total AS viewTotal')
            ->page($page, $perPageNumber)
            ->order('last_update_time DESC')
            ->select();
        if (empty($artworkList)) {
            return [];
        }
        $assetsLogic = new AssetsLogic();
        foreach ($artworkList as &$artwork) {
            $catid = $artwork['category'];
            unset($artwork['category']);
            $info = M('ArtworkCategory')->field('cn_name')->find($catid);
            $artwork['category_name'] = $info['cn_name'];
            $artwork['coverUrl'] = Util::getImageResize($artwork['cover'],Image::artworkDetailListWidth,Image::artworkDetailListHeight);
            unset($artwork['cover']);
            $artwork['last_update_time'] = date('Y-m-d H:i',$artwork['last_update_time']);
        }

        return $artworkList;
    }

    //获取所有完成的艺术品
    public function getFinishedList($artistId){
        $artworkList = $this->model
            ->where(['artist'=>$artistId,'is_deleted'=>'N', 'is_finished'=>'Y' ,'state'=>1])
            ->field('id,name,update_times AS updateTimes,shape,length,width,diameter,category,panorama_ids,story,last_update_time,
            is_finished AS isFinished, like_total AS likeTotal, view_total AS viewTotal')
            ->order('create_time DESC, last_update_time DESC')
            ->select();
        if (empty($artworkList)) {
            return [];
        }
        $assetsLogic = new AssetsLogic();
        foreach ($artworkList as &$artwork) {
            $catid = $artwork['category'];
            unset($artwork['category']);
            $info = M('ArtworkCategory')->field('cn_name')->find($catid);
            $artwork['category_name'] = $info['cn_name'];
            $arrimg = explode(',',$artwork['panorama_ids']);
            $artwork['panorama'] = Util::getImageToSq($arrimg[0],Image::artworkDetailListWidth,Image::artworkDetailListHeight);
            unset($artwork['panorama_ids']);
            $artwork['last_update_time'] = date('Y-m-d H:i',$artwork['last_update_time']);
        }

        $result = $artworkList;
        Util::jsonReturn(['status'=>1000, 'info'=>$result]);

    }
    public function getArtworkList($artistIdList)
    {
        $artworkList = $this->model
            ->where(['artist'=>$artistIdList,'is_deleted'=>'N','update_times'=>['gt',0]])
            ->order('create_time DESC, last_update_time DESC')
            ->select();
        if (empty($artworkList)) {
            return [];
        }
        return $artworkList;
    }
    //get not finished artwork list by artist id && page && perPageCount
    public function getUnFinishedArtworkList($artistId, $page =1, $perPageCount = 10,$field = 'id, tag_ids,name, artist AS artistId,update_times AS updateTimes')
    {
        $artworkList = $this->model
            ->where(['artist'=>$artistId,'is_deleted'=>'N','update_times'=>['gt',0]])
            ->field($field)
            ->order('last_update_time DESC,create_time DESC')
            ->page($page, $perPageCount)
            ->select();
        return empty($artworkList) ? [] : $artworkList;
    }
    public function getUpdateNumber($artworkId)
    {
        $data = $this->model->where(['id'=>$artworkId])->getField('update_times');
        if(empty($data)) {
            return false;
        } else {
            return intval($data);
        }
    }
    public function getMore($id)
    {
         $data = $this->model->where(['id'=>$id])->find();
        if(empty($data)) {
            return false;
        } else {
            return $data;
        }
    }
    public function getArtworkDetail($artworkId,$loginUserId= '')
    {
       /* if($loginUserId>0){
            //如果有登录，则显示该登录用户所有艺术品(包括仅自己可见)
            $data = $this->model->where(['id'=>$artworkId,'is_deleted' => 'N'])->find();
        }else{
            $data = $this->model->where(['id'=>$artworkId,'state'=>1,'is_deleted' => 'N'])->find();
        }*/
        $data = $this->model->where(['id'=>$artworkId,'is_deleted' => 'N'])->find();
        if($data['state']==2&&$data['artist']!=$loginUserId){//画作仅自己看的时候，不是作者就隐藏
            return false;
        }
        //版画
        $prints_Info = M('artwork_prints')->where(['artwork_id' => intval($artworkId),'status'=>1,'is_for_sale'=>1])->order('id desc')->find();
        $printsinfo=[
            'is_for_sale'=>$prints_Info?1:0,
            'sale_url'=>$prints_Info?trim($prints_Info['sale_url']):'',
        ];

        if (empty($data)) {
            return [];
        } else {
            $recommendLogic = new RecommendLogic();
            $recommendLogic->toArtworkview($artworkId,$loginUserId);
            $artUpdateLogic = new ArtworkUpdateLogic();
            $tagModel = new ArtworkTagModel();
            $userLogic = new UserLogic();
            $commentLogic = new CommentLogic();
            $categoryLogic = new ArtworkCategoryLogic();
            $artworkLikeLogic = new ArtworkLikeLogic();
            $data['coverUrl'] = Util::getImageResize($data['cover'],Image::artworkWidth,Image::artworkHeight);
            $coverList  = array_merge($data['panorama_ids'] ? explode(',',$data['panorama_ids']) : [],$data['topography_ids'] ? explode(',',$data['topography_ids']) : [],[$data['cover']]);
            $data['coverThumbList'] = Util::getImageResizes($coverList,Image::artworkWidth,Image::artworkHeight);
            //water
            $coverList = Util::imageWaters($coverList);
            $data['coverList'] = $coverList;

            $a_subject = M('ArtzheCustom')->field('cn_name')->where(['type' => 2, 'artworkid' => $artworkId])->find();
            $a_style = M('ArtzheCustom')->field('cn_name')->where(['type' => 3, 'artworkid' => $artworkId])->find();
            if($a_subject['cn_name']==''&&$a_style['cn_name']=='') {
                $a = M('ArtzheCustom')->field('cn_name')->where(['type' => 4, 'artworkid' => $artworkId])->find();
                //$data['tags'] = array_values($tagModel->getTagContent($data['tag_ids']));
                if (strpos("{$a['cn_name']}", "，") !== false) {
                    $a['cn_name'] = str_replace("，", ",", $a['cn_name']);
                    $a['cn_name'] = trim($a['cn_name'], ',');
                    $catTag = explode(',', $a['cn_name']);
                } elseif (strpos("{$a['cn_name']}", ",") !== false) {
                    $a['cn_name'] = str_replace("，", ",", $a['cn_name']);
                    $a['cn_name'] = trim($a['cn_name'], ',');
                    $catTag = explode(',', $a['cn_name']);
                } else {
                    $catTag = ['0' => $a['cn_name']];
                }
            }else{
                $cat_list_str=$a_subject['cn_name'].','.$a_style['cn_name'];
                $cat_tag=explode(',',$cat_list_str);
                $cat_tag=array_filter($cat_tag);
                //$cat_tag_str=implode(',',$cat_tag);
                $cat_tag=array_values($cat_tag);
                $catTag=$cat_tag;
            }
            $catTag = empty($catTag)?[]:$catTag;
            $data['tags'] = empty($data['tag_ids'])?$catTag:array_values($tagModel->getTagContent($data['tag_ids']));

            $tempcat = '';
            if($data['category']!=10){
                $arr = explode(',',$data['category']);
                foreach ($arr as $kk=>$vv){
                    $rc = M('ArtworkCategory')->field('cn_name')->find($vv);
                    $tempcat .= $rc['cn_name'].'/';
                }
                $catName = trim($tempcat,'/');
            }else{
                $catName = '其他';
            }

            $artwork_size='';
            if($data['shape']==1){
                $artwork_size=$data['length']>0&&$data['width']>0?floatval($data['length']).'cm×'.floatval($data['width']).'cm':'';
            }elseif($data['shape']==2){
                $artwork_size=$data['diameter']>0?'D='.floatval($data['diameter']).'cm':'';
            }
            if($catName=='') {
                $data['category_name'] =  $artwork_size;
            }else{
                $data['category_name'] = $artwork_size==''?$catName:$catName .'/'. $artwork_size;
            }
            $data['length']=trim(floatval($data['length']));
            $data['width']=trim(floatval($data['width']));
            $data['diameter']=trim(floatval($data['diameter']));

            $data['is_like'] = $artworkLikeLogic->isLike($data['id'],1,$loginUserId);
            $years = $artUpdateLogic->query(
              "SELECT  left(create_date,4) as year FROM `az_artwork_update` WHERE `artwork_id` = {$artworkId} AND `is_deleted` = 'N'  GROUP BY left(create_date,4) order by create_date desc
              ");

            if(!empty($years)){
              foreach ($years as  $yearvalue) {
                $artUpdateList = $artUpdateLogic->field('id,artwork_id,number,wit,cover,summary,comment_total,last_update_time,create_date,create_time')->where("`artwork_id` = {$artworkId} AND `is_deleted` = 'N' AND left(create_date,4) = {$yearvalue['year']}")->order('create_date DESC,create_time DESC')->select();
                $lastUpdateId = '';
                //print_r($artUpdateLogic->getLastSql());
                //exit;
                foreach ($artUpdateList as $key => $value) {
                    $temp=null;
                  $incoverList = Util::extractWitImgUrl($value['wit'],'org','org');
                  if(count($incoverList)==0){
                      $incoverList=[$value['cover']];
                  }
                  $artUpdateList[$key]['coverUrl'] = Util::getImageResizes($incoverList,Image::updateListWidth,Image::updateListHeight);
                    $artUpdateList[$key]['coverUrl']=array_slice($artUpdateList[$key]['coverUrl'],0,3);
                  //$commentList = $commentLogic->field('nickname,content,flag')->where(['topic_id' => $value['id'],'type' => '2','is_deleted' => 'N'])->order('create_time desc')->limit(3)->select();
                    $commentList = $commentLogic->field('az_user.nickname,az_comment.content,az_comment.flag')->join('az_user on az_comment.commenter=az_user.id','left')->where("az_comment.topic_id=".intval($value["id"])." and az_comment.type=2 and az_comment.is_deleted='N' and az_comment.parent_id=0")->order('az_comment.create_time desc')->limit(3)->select();
                    //$comment_total = $commentLogic->where(['topic_id' => $value['id'],'type' => '2','is_deleted' => 'N'])->count();
                    //$comment_total = $commentLogic->where("topic_id=".intval($value["id"])." and type=2 and is_deleted='N' and commenter!=".intval($data["artist"]))->count();
                    //$comment_total = $commentLogic->where("topic_id=".intval($value["id"])." and type=2 and is_deleted='N'")->count();
                  $artUpdateList[$key]['comment_total'] = $value['comment_total'];
                  //$artUpdateList[$key]['comment'] = $commentList;
                    if(empty($commentList)){
                        $artUpdateList[$key]['comment'] = [];
                    }else{
                        foreach ($commentList as $k=>$v){
                            $temp[$k]['nickname'] = $v['nickname'];
                            if('2'==$v['flag']){
                                $temp[$k]['content'] = base64_decode($v['content']);
                            }else{
                                $temp[$k]['content'] = $v['content'];
                            }
                        }
                        $artUpdateList[$key]['comment'] = $temp;
                    }
                  if(empty($value['summary'])){
                    $artUpdateList[$key]['summary'] = mb_substr(strip_tags(htmlspecialchars_decode(str_replace('&nbsp;','',$value['wit']))),0,54);
                  }else{
                    $artUpdateList[$key]['summary'] = mb_substr(strip_tags(htmlspecialchars_decode(str_replace('&nbsp;','',$value['summary']))),0,54);
                  }
                  $artUpdateList[$key]['is_like'] = $artworkLikeLogic->isLike($data['id'],2,$loginUserId);
                  unset($artUpdateList[$key]['wit']);
                  if(!$lastUpdateId){
                    $lastUpdateId = $value['id'];
                  }
                }
                $data['updateList'][] = [
                  'year' => $yearvalue['year'],
                  'list' => $artUpdateList
                ];
              }
            }else{
              $data['updateList'] = [];
            }
            if(empty($data['story'])){
              $info = $artUpdateLogic->where([
                'number' => $data['update_times'],
                'artwork_id' => $data['id']
              ])->find();
              $data['story'] = mb_substr(strip_tags(htmlspecialchars_decode(str_replace('&nbsp;','',$info['wit']))),0,54);
            }else{
              $data['story'] = strip_tags(htmlspecialchars_decode($data['story']));
            }
            $data['story'] = str_replace("\\`","'",$data['story']);
            $publisher = $userLogic->getUserDesc($data['artist'],$loginUserId);
            $data['comment_total'] = $commentLogic->getTotal($artworkId);
            $data['commentFace'] = $commentLogic->getLastFace($artworkId);
            $data['publisher'] = $publisher;
            $data['lastUpdateId'] = $lastUpdateId;
            $data['is_edit'] = $data['artist'] == $loginUserId ? 'Y' : 'N';
            $this->where(['id'=>$artworkId])->setInc('view_total',1);

            if(strpos("{$data['name']}}","《")!==false){
                $artName = $data['name'];
            }else{
                $artName = '《'.$data['name'].'》';
            }
            $data['prints']=$printsinfo;
            $data['shareTitle'] = "{$publisher['nickname']}{$artName}";
            $data['shareDesc'] = $data['story'];
            $data['shareImg'] = Util::getFillImage(Util::getImgUrlById($data['cover']),Image::faceWidth,Image::faceHeight);
            $data['shareLink'] = C('m_site').'/artwork/detail/'.$artworkId;
            $data['shareInfo'] = [
              'cover' => $data['coverUrl'],
              'face' => $publisher['faceUrl'],
              'name' => $publisher['nickname'],
                'motto' => $publisher['motto'],
              'category' => $categoryLogic->getCategoryByUser($data['artist']),
              'link' => $data['shareLink']
            ];
            return $data;
        }
    }
    public function ArtUpdate($data,$id){
      return $this->where(['id' => $id])->save($data);
    }

    public function getRecommendList($ids){
      $where = ['is_deleted' => 'N'];
      $list = $this->model
      ->field('id,artist,name,cover,update_times,is_finished')
      ->where($where)->order('last_update_time DESC')->page($page,$pagesize)->select();
      foreach ($list as $key => $value) {
        $list[$key]['coverUrl'] = Util::getImageToSq($value['cover'],Image::recommendListWidth,Image::recommendListHeight);
      }
      $total = $this->model->where($where)->count();
      $maxpage = intval($total/$pagesize)+1;
      return [
        'list' => empty($list) ? [] : $list,
        'page' => $page,
        'total' => $total,
        'pagesize' => $pagesize,
        'maxpage' => $maxpage
      ];
    }
    public function getDesc($artId){
      $info = $this->field('id,cover,panorama_ids,is_finished,topography_ids,name,shape,length,width,diameter,color_ids,category,artist,story')->where(['id' => $artId,'is_deleted' => 'N'])->find();
      if(!empty($info['panorama_ids'])){
        $info['panorama_ids'] = explode(',',$info['panorama_ids']);
      }
      if(!empty($info['topography_ids'])){
        $info['topography_ids'] = explode(',',$info['topography_ids']);
      }
      return $info;
    }
}
