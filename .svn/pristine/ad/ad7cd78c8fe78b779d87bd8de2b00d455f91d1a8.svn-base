<?php

namespace Common\Logic;

use Common\Logic\ArtworkCategoryLogic;
use Common\Model\ArtworkCategoryModel;
use Common\Model\ArtworkCategoryStatModel;
use Common\Base\BaseLogic;
use Common\Model\ArtworkStyleModel;
use Common\Model\ArtworkSubjectModel;
use Common\Model\UserModel;
use Common\Model\ArtworkModel;
use Common\Model\GalleryModel;
use Common\Model\UserFollowerModel;
use Custom\Define\Cache;
use Custom\Define\Image;
use Custom\Helper\Util;

class GalleryLogic extends BaseLogic
{
    public function showArtworkSubjectAndStyle($forceUpdate = false)
    {
        if ($forceUpdate) {
            $group = $this->getArtworkSubjectAndStyle();
            S(Cache::ARTWORK_SUBJECT_AND_STYLE, $group);
            Util::jsonReturn($group);
        } else {
            if (!empty($cacheResult = S(Cache::ARTWORK_SUBJECT_AND_STYLE))) {
                Util::jsonReturn($cacheResult);
            } else {
                $group = $this->getArtworkSubjectAndStyle();
                S(Cache::ARTWORK_SUBJECT_AND_STYLE, $group);
                Util::jsonReturn($group);
            }
        }
    }

    public function showArtworkCategoryStat($forceUpdate = false)
    {
        if ($forceUpdate) {
            $statGroup = $this->getArtworkCategoryStat();
            S(Cache::ARTWORK_CATEGORY_STAT_RESULTS, $statGroup);
            Util::jsonReturn(['status'=>1000, 'info'=>$statGroup]);
        } else {
            if (!empty($cacheResult = S(Cache::ARTWORK_CATEGORY_STAT_RESULTS))) {
                Util::jsonReturn(['status'=>1000, 'info'=>$cacheResult]);
            } else {
                $statGroup = $this->getArtworkCategoryStat();
                S(Cache::ARTWORK_CATEGORY_STAT_RESULTS, $statGroup);
                Util::jsonReturn(['status'=>1000, 'info'=>$statGroup]);
            }
        }
    }
    public function getArtworkSubjectAndStyle()
    {
        $aStyleModel = new ArtworkStyleModel();
        $aSubjectModel = new ArtworkSubjectModel();
        $styles = $aStyleModel->order('sort ASC, id ASC')->getField('id,cn_name');
        $subjects = $aSubjectModel->order('sort ASC, id ASC')->getField('id,cn_name');
        return ['style'=>$styles, 'subject'=>$subjects];
    }
    public function getArtworkCategoryStat($gender = '')
    {
      $return = [];
      $artModel = new ArtworkModel();
      $artCateModel = new ArtworkCategoryModel();
      $alltotal = $artModel->where(['is_deleted' => 'N'])->count();
      $categoryListAll = $artCateModel->select();
      $return[] = [
        'category' => '0',
        'categoryName' => '全部',
        'total' => $alltotal
      ];
      foreach ($categoryListAll as $key => $value) {
        $where = sql_pin_where([
          'a.is_deleted' => 'N',
          'a.category' => $value['id'],
          'b.is_deleted' => 'N',
          'b.banned_to' => -1,
          'b.gender' => $gender
        ],'AND','');
        $query = <<<SQL
SELECT count(distinct(artist)) as count FROM `az_artwork` a LEFT JOIN `az_user` b ON a.artist = b.id
WHERE $where
SQL;

        $total = $artModel->query($query)[0]['count'];
        if($total > 0){
          $return[] = [
            'category' => $value['id'],
            'categoryName' => $value['cn_name'],
            'total' => $total
          ];
        }
      }
      return $return;
    }
    private function switchGenderType2En($type)
    {
        if ($type == '-1') {
            return 'all';
        } else {
            return UserModel::GENDER_EN_LIST[$type];
        }
    }
    private function switchCategoryType2Cn($type)
    {
        $acModel = new ArtworkCategoryModel();
        $categoryResult = $acModel->getField('id,cn_name');
        if ($type == '-1') {
            return '全部';
        } else {
            return $categoryResult[$type];
        }
    }
    public function showArtworkList($userId, $gender, $category, $page = 1, $perPageNumber = 5, $x = 3)
    {
        $result = $this->getListByFollower($userId, $gender, $category, $page, $perPageNumber, $x);

        Util::jsonReturn($result);
    }
    public function getListByFollower($userId, $gender, $category, $page = 1, $perPageNumber = 5, $x = 3)
    {
        $condition = [
            'is_deleted'=>'N',
            'banned_to'=>[['eq', '-1'],['gt', $_SERVER['REQUEST_TIME']], 'or'],
            'type'=>[['in', [3,7]]]
        ];
        if ($gender != -4) {
            $condition['gender'] = $gender;
        }
        if ($category != -4) {
            $condition['category'] = $category;
        }
        $userModel = new UserModel();
        $artistList = $userModel
            ->where($condition)->order('follower_total DESC, create_time DESC, login_times DESC')
            ->page($page, $perPageNumber)
            ->getField('id,nickname,gender,face,follower_total AS followerTotal');
        if (empty($artistList)) {
            return [];
        }
        $assetsLogic = new AssetsLogic();
        $userFollowerLogic = new UserFollowerLogic();
        $artworkLogic = new ArtworkLogic();
        $artworkStatLogic = new ArtworkStatLogic();

        $artistIdList = array_keys($artistList);
        $faceIdList = array_column($artistList, 'face');
        //获取艺术家头像
        $faceUrlList = $assetsLogic->getUrlList($faceIdList);
        //获取艺术家画廊封面
        $coverUrlList = $this->getCoverUrlList($artistIdList);
        //获取当前用户是否关注情况
        $isFollowedList = $userFollowerLogic->getIsFollowedList($artistIdList, $userId);
        //获取艺术家作品分类列表
        $artistCategoryList = $artworkLogic->getArtistCategoryList($artistIdList);
        //获取最近的x幅画
        $latestXArtworkList = $artworkLogic->getLatestXArtworkList($artistIdList, $x);
        //获取艺术家的作品数量
        $artistArtworkTotal = $artworkStatLogic->getArtworkTotal($artistIdList);
        foreach ($artistIdList as $artistId =>&$artist) {
            $artist['faceUrl'] = Util::getFillImage($faceUrlList[$artistId],Image::faceWidth,Image::faceHeight);
            $artist['coverUrl'] = $coverUrlList[$artistId];
            $artist['isFollowedList'] = $isFollowedList[$artistId];
            $artist['categoryList'] = $artistCategoryList[$artistId];
            $artist['latestXArtworkList'] = $latestXArtworkList[$artistId];//todo
            $artist['artworkTotal'] = $artistArtworkTotal[$artistId];
        }
        return $artist;
    }

    public function getCoverUrlList($userIdList)
    {
        $coverList = $this->model
            ->where(['artist'=>['in', $userIdList], 'is_deleted'=>'N'])
            ->getField('cover,artist');
        if (empty($coverList)) {
            return [];
        }
        $assetsLogic = new AssetsLogic();
        $urlList = $assetsLogic->getUrlList(array_values($coverList));
        $coverUrlList = [];
        foreach ($coverList  as $coverId => $cover) {
            $coverUrlList[$cover['artist']] = $urlList[$coverId];
        }
        return $coverUrlList;
    }
    public function showDetail($artistId, $loginUserId)
    {
        $artworkStatLogic = new ArtworkStatLogic();
        $artworkCateogoryLogic = new ArtworkCategoryLogic();
        $artLogic = new ArtworkLogic();
        $assetsLogic = new AssetsLogic();
        $userLogic = new UserLogic();
        $userFollowerLogic = new UserFollowerLogic();
        $galleryModel = new GalleryModel();
        $ret = [];
        //封面图片
        $cover = $galleryModel->where("artist = {$artistId}")->getField('cover');
        $ret['coverUrl'] = Util::getFillImage(Util::getImgUrlById($cover),Image::galleryBgWidth,Image::galleryBgHeight);

        //画作数量
        $artModel = new ArtworkModel();
        $ret['artworkTotal'] = $artModel->where("artist = $artistId AND update_times > 0 AND state = 1")->count();
        //头像
        $assetsInfo = $assetsLogic->getDetailById($artistId);
        //姓名
        $artistInfo = $userLogic->getUserInfoById($artistId);
        $ret['faceUrl'] = Util::getFillImage($artistInfo['face'],Image::faceWidth,Image::faceHeight);
        $ret['name'] = $artistInfo['name'];
        //个性签名
        $ret['motto'] = $artistInfo['motto'];
        //艺术家履历
        $ret['resume'] = $artistInfo['resume'];
        //画作被喜欢总数
        $ret['likeTotal'] = intval($artLogic->where(['is_deleted' => 'N','artist'=>$artistId])->sum('like_total'));
        //画作被浏览总数
        $ret['viewTotal'] = intval($artLogic->where(['is_deleted' => 'N','artist'=>$artistId])->sum('view_total'));

        $ret['followTotal'] = $userFollowerLogic->where(['user_id' => $artistId,'is_follow' => 'Y'])->count();
        //是否关注
        $userFollowerModel = new UserFollowerModel();
        $ret['isFollowed'] = $userFollowerModel->isFollow($artistId,$loginUserId);

        $ret['shareTitle'] = $artistInfo['nickname'].'的艺术画廊';
        $ret['shareDesc'] = $artistInfo['motto'];
        $ret['shareImg'] = Util::getFillImage(Util::getImgUrlById($cover),Image::faceWidth,Image::faceHeight);
        $ret['shareLink'] = C('m_site').'/gallery/detail/'.$artistId;
        $ret['shareInfo'] = [
          'cover' => $ret['coverUrl'],
          'face' => $ret['faceUrl'],
          'name' => $artistInfo['nickname'],
          'category' => $artworkCateogoryLogic->getCategoryByUser($artistInfo['id']),
          'motto' => $artistInfo['motto'],
          'link' => $ret['shareLink']
        ];

        Util::jsonReturn(['status'=>1000, 'info'=>$ret]);
    }
    public function getDetailById($id)
    {
        $data = $this->model->where(['id'=>$id])->find();
        if (empty($data)) {
            return [];
        } else {
            return $data;
        }
    }
    public function getDetailByArtist($artistId)
    {
      $artLogic = new ArtworkLogic();
      //画作被喜欢总数
      $likeTotal = intval($artLogic->where(['is_deleted' => 'N','artist'=>$artistId])->sum('like_total'));
      //画作被浏览总数
      $viewTotal = intval($artLogic->where(['is_deleted' => 'N','artist'=>$artistId])->sum('view_total'));
      return [
        'like_total' => $likeTotal,
        'view_total' => $viewTotal
      ];
    }
    public function setFieldByArtistId($artistId, $fieldInfo)
    {
        return $this->model->where(['artist'=>$artistId])->setField($fieldInfo);
    }
    //get gallery category name  list by artist id
    public function getGalleryCateNameList($artistId)
    {
        $categoryIds = $this->model->where(['artist'=>$artistId, 'is_deleted'=>'N'])->getField('category_ids');
        if (empty($categoryIds)) {
            return [];
        }
        $categoryIdList = explode(',',$categoryIds);
        $artworkCategoryLogic = new ArtworkCategoryLogic();
        $categoryIdNamePairs = $artworkCategoryLogic->getList();
        $galleryCateNameList = [];
        foreach ($categoryIdList as $categoryId) {
            $galleryCateNameList[] = $categoryIdNamePairs[$categoryId];
        }
        return $galleryCateNameList;
    }
    public function getArtistTotal(){
      $userModel = new UserModel();
      $where = "  type = 3 AND is_deleted = 'N' AND banned_to = -1 AND art_total > 0  ";
      return $total = $userModel->where($where)->count();
    }
    public function getGalleryList($gender,$category,$page,$pagesize,$loginUserId){
      $userModel = new UserModel();
      $artModel = new ArtworkModel();
      $cateModel = new ArtworkCategoryModel();
      $galleryModel = new GalleryModel();
      $userFollowerModel = new UserFollowerModel();
      $artistInfo = $artModel->field('artist')->where(['is_deleted'=>'N','update_times'=>['gt',0]])->select();
      $temp = [];
      foreach ($artistInfo as $k=>$v){
          $temp[$k] = $v['artist'];
      }
      $temp = array_unique($temp);
      $artids = implode(',',$temp);

      $where = "  type = 3 AND is_deleted = 'N' AND banned_to = -1 AND id in ({$artids})  ";
      if($gender){
        $where .= " AND gender = {$gender}  ";
      }
      if($category){
        $where .= " AND find_in_set({$category},category)  ";
      }
      $list = $userModel->
      field('id,nickname as name,category,follower_total,gender,face')->
      where($where)->page($page,$pagesize)->order('last_update_time DESC')->select();
      $total = $userModel->where($where)->count();
      foreach ($list as $key => $value) {
          $list[$key]['total_art'] = $artModel->where(['artist' => $value['id'],'is_deleted'=>'N','state'=>1,'update_times'=>['gt',0]])->count();
        $category_content = $cateModel->getContent(implode(',',$artModel->getFields(['artist' => $value['id']],'category')));
        $list[$key]['category_content'] = $category_content;
        $list[$key]['category_names'] = implode('/',array_values($category_content));
        $list[$key]['faceUrl'] = Util::getFillImage($value['face'],Image::faceWidth,Image::faceHeight);
        $cover = $galleryModel->where("artist = {$value['id']}")->getField('cover');
        $list[$key]['cover'] = Util::getImageResize($cover,Image::galleryWidth,Image::galleryHeight);
        $list[$key]['coverUrl'] = Util::getImageResize($cover,Image::galleryWidth,Image::galleryHeight);
        $list[$key]['otherArt'] = Util::getImageResizes($artModel->getThumbListByUid($value['id']),150,150);
        $list[$key]['follow'] = $userFollowerModel->isFollow($value['id'],$loginUserId);
      }
      $maxpage = intval($total/$pagesize)+1;
      return [
        'list' => empty($list) ? [] : $list,
        'page' => $page,
        'total' => $total,
        'pagesize' => $pagesize,
        'maxpage' => $maxpage
      ];
    }
}
