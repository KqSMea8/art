<?php

namespace V22\Controller;

use V22\Base\ApiBaseController;
use V22\Logic\ArtworkCategoryLogic;
use V22\Logic\ArtworkColorLogic;
use V22\Logic\ArtworkLikeLogic;
use V22\Logic\MessageLogic;
use V22\Logic\ArtworkLogic;
use V22\Logic\ArtworkTagLogic;
use V22\Logic\ArtworkUpdateLogic;
use V22\Logic\CommentLogic;
use V22\Logic\AssetsLogic;
use V22\Logic\UserLogic;
use Custom\Define\Code;
use Custom\Helper\Checker;
use Custom\Helper\Util;
use Custom\Define\Image;
use Custom\Manager\Token;
use Custom\Helper\Verify;
use V22\Logic\RecommendLogic;

//artwork upload
class ArtworkController extends ApiBaseController
{

    //是否可发布（用于判断本次更新是否可以完成画作）
    public function canBePublished()
    {
        $this->checkLogin();
        $tokenInfo = Token::getTokenInfo($this->token);
        //todo  if the userId is matched with follow artworkUpdateId
        $userId = $tokenInfo['userInfo']['id'];
        $artworkUpdateId = I('post.artworkUpdateId'); //艺术品更新id

        $artworkUpdateLogic = new ArtworkUpdateLogic();
        $artworkUpdateDetail = $artworkUpdateLogic->getDetail($artworkUpdateId);
        //if >24hour
        // if ($_SERVER['REQUEST_TIME'] > $artworkUpdateDetail['create_time'] + 24*3600)
        // {
        //     Util::jsonReturn(['status'=>1001]);//timeout
        // }
        $artworkId = $artworkUpdateDetail['artwork_id'];
        $artworkLogic = new ArtworkLogic();
        $artworkDetail = $artworkLogic->getDetail($artworkId);

        //1. if current edit artwork update's update_times less then the artwork's max update_times,
        //   then cannot be finish the artwork creation
        if ($artworkDetail['update_times'] > $artworkUpdateDetail['number']) {
            $canBePublished = false;
        } else {
            $canBePublished = true;
        }
        if ($canBePublished) {
            Util::jsonReturn(['status' => 1000, 'rest' => ($_SERVER['REQUEST_TIME'] - $artworkUpdateDetail['create_time'])]);
        } else {
            Util::jsonReturn(['status' => 1002]);
        }
    }

    public function like()
    {
        $this->checkLogin();
        $type = I('post.type', '1', 'number_int');
        $tokenInfo = Token::getTokenInfo($this->token);
        $id = Checker::numberId();


        $userLogic = new UserLogic(); //实例化用户模块
        $userInfo = $userLogic->getUserInfoById($tokenInfo['userInfo']['id']); //根据用户id获取用户信息
        $assetsLogic = new AssetsLogic(); //获取用户头像
        $faceUrl = $assetsLogic->getUrl($userInfo['face']);


        $artworkLikeLogic = new ArtworkLikeLogic();
        $likeData = [
            'artwork_id' => $id,//todo if not exists or deleted.
            'like_user_id' => $this->loginUserId,
            'like_time' => time(),
            'is_like' => 'Y',
            'type' => $type
        ];
        $likeId = $artworkLikeLogic->like($likeData, $type);
        if ($likeId) {
            Util::jsonReturn(['status' => 1000, 'faceUrl' => $faceUrl]);
        } else {
            Util::jsonReturn(null, Code::SYS_ERR, '记录不存在，或者已经喜欢了');
            //Util::jsonReturn(['status'=>1000, 'faceUrl'=>$faceUrl]);
        }
    }

    public function unlike()
    {
        $this->checkLogin();
        $type = I('post.type', '0', 'number_int');
        $tokenInfo = Token::getTokenInfo($this->token);
        $id = Checker::numberId();

        $userLogic = new UserLogic(); //实例化用户模块
        $userInfo = $userLogic->getUserInfoById($tokenInfo['userInfo']['id']); //根据用户id获取用户信息
        $assetsLogic = new AssetsLogic(); //获取用户头像
        $faceUrl = $assetsLogic->getUrl($userInfo['face']);


        $artworkLikeLogic = new ArtworkLikeLogic();
        $likeData = [
            'artwork_id' => $id,//todo if not exists or deleted.
            'like_user_id' => $this->loginUserId,
            'unlike_time' => time(),
            'is_like' => 'N',
            'type' => $type
        ];
        if ($type > 0) {
            $likeResult = $artworkLikeLogic->saveUnlike($likeData, $type);
        } else {//不喜欢一个艺术品，就是包括了不喜欢该艺术品的更新，艺术品的喜欢和更新的喜欢一起删除
            $likeResult = $artworkLikeLogic->delUserlike_byArtid($likeData);
        }
        if ($likeResult) {
            //Util::jsonReturn();
            Util::jsonReturn(['status' => 1000, 'faceUrl' => $faceUrl]);
        } else if ($likeResult == false) {
            //Util::jsonReturn(null, Code::SYS_ERR, '记录不存在，或者已经取消喜欢了');
            Util::jsonReturn(['status' => 1000, 'faceUrl' => $faceUrl]);
        }
    }

    //get my update artwork list
    public function getMyUpdateArtworkList111()
    {
        $tokenInfo = Token::getTokenInfo($this->token);
        $artistId = $tokenInfo['userInfo']['id'];
        $page = I('post.page', 1);
        $perPageCount = I('post.perPageCount', 10);
        $artworkLogic = new ArtworkLogic();
        //$assetsLogic  = new AssetsLogic();

        $artworkList = $artworkLogic->where(['artist' => $artistId, 'is_deleted' => 'N'])
            ->field('id,tag_ids,name,cover,artist AS artistid,update_times,story,state,last_update_time,is_finished')
            ->order('last_update_time DESC,create_time DESC')
            ->page($page, $perPageCount)
            ->select();

        if (empty($artworkList)) {
            $unFinishedArtworkList = [];
        } else {
            foreach ($artworkList as $k => $v) {
                $artworkUpdateLogic = new ArtworkUpdateLogic();
                $updateDetail = $artworkUpdateLogic->getLastUpdateDetail($v['id']);
                $unFinishedArtworkList[$k]['artistId'] = $v['id'];
                $unFinishedArtworkList[$k]['coverUrl'] = Util::getImageResize($v['cover'], 300, 300);
                $unFinishedArtworkList[$k]['name'] = $v['name'];
                $unFinishedArtworkList[$k]['updateId'] = $updateDetail['id'];
                $unFinishedArtworkList[$k]['state'] = $v['state'];
                $unFinishedArtworkList[$k]['story'] = $v['story'];
                $unFinishedArtworkList[$k]['updateTimes'] = $v['update_times'];
                $unFinishedArtworkList[$k]['isEdit'] = 'Y';
                $unFinishedArtworkList[$k]['is_finished'] = $v['is_finished'];
                $unFinishedArtworkList[$k]['last_update_time'] = date('Y-m-d H:i', $v['last_update_time']);
            }

        }

        //$unFinishedArtworkList = empty($artworkList) ? [] : $artworkList;
        //$unFinishedArtworkList = $artworkLogic->getUnFinishedArtworkList($artistId, $page, $perPageCount);


        Util::jsonReturn(['status' => 1000, 'info' => $unFinishedArtworkList]);
    }

    public function getMyUpdateArtworkList()
    {
        $tokenInfo = Token::getTokenInfo($this->token);
        $artistId = $tokenInfo['userInfo']['id'];
        $page = I('post.page', 1);
        $perPageCount = I('post.perPageCount', 10);
        $artworkLogic = new ArtworkLogic();

        $artworkList = $artworkLogic->where(['artist' => $artistId, 'is_deleted' => 'N'])
            // ->field('id,tag_ids,name,cover,panorama_ids,artist AS artistid,update_times,story,state,last_update_time,is_finished,finish_percent')
            ->order('last_update_time DESC,create_time DESC')
            ->page($page, $perPageCount)
            ->select();

        if (empty($artworkList)) {
            $unFinishedArtworkList = [];
        } else {
            foreach ($artworkList as $k => $v) {
                if (trim($v['cover']) != '') {
                    $img = Util::getImgUrlById($v['cover']);
                } else {
                    $images = explode(',', $v['panorama_ids']);
                    $img = $images[0];
                }


                $artcusModel = M('ArtzheCustom'); //实例化自定义表
                $c = $artcusModel->field('cn_name')->where(['artworkid' => $v['id'], 'type' => '1'])->find();
                $s = $artcusModel->field('cn_name')->where(['artworkid' => $v['id'], 'type' => '2'])->find();
                $s2 = $artcusModel->field('cn_name')->where(['artworkid' => $v['id'], 'type' => '3'])->find();

                $num = 0; //统计数
                $percent = 0; //百分比

                //先判断是方形还是圆形
                if (!empty($v)) {
                    if (1 == $v['shape']) {
                        //方形
                        if (!empty($v['name'])) {
                            $num += 1;
                        }
                        if (!empty($v['state'])) {
                            $num += 1;
                        }
                        if (!empty($v['color_ids'])) {
                            $num += 1;
                        }
                        if (intval($v['length']) > 0 && intval($v['width']) > 0) {
                            $num += 1;
                        }
                        if (!empty($v['panorama_ids'])) {
                            $num += 1;
                        }
                        if (!empty($v['topography_ids'])) {
                            $num += 1;
                        }
                        if ($v['category'] != -1 || !empty($c) || !empty($v['subject_ids']) || !empty($s) || !empty($v['style_ids']) || !empty($s2)) {
                            $num += 1;
                        }
                        if (!empty($v['story'])) {
                            $num += 1;
                        }
                        $percent = round($num / 8 * 100); //计算百分比
                    } else {
                        //圆形
                        if (!empty($v['name'])) {
                            $num += 1;
                        }
                        if (!empty($v['state'])) {
                            $num += 1;
                        }
                        if (!empty($v['color_ids'])) {
                            $num += 1;
                        }
                        if (floatval($v['diameter']) > 0) {
                            $num += 1;
                        }
                        if (!empty($v['panorama_ids'])) {
                            $num += 1;
                        }
                        if (!empty($v['topography_ids'])) {
                            $num += 1;
                        }
                        if ($v['category'] != -1 || !empty($c) || !empty($v['subject_ids']) || !empty($s) || !empty($v['style_ids']) || !empty($s2)) {
                            $num += 1;
                        }
                        if (!empty($v['story'])) {
                            $num += 1;
                        }
                        $percent = round($num / 8 * 100); //计算百分比
                    }
                } else {
                    $percent = 0;
                }


                $unFinishedArtworkList[$k]['artistId'] = $v['id'];
                $unFinishedArtworkList[$k]['coverUrl'] = Util::getImageResize($img, 300, 300);
                $unFinishedArtworkList[$k]['name'] = $v['name'];
                $unFinishedArtworkList[$k]['state'] = $v['state'];
                $unFinishedArtworkList[$k]['story'] = $v['story'];
                $unFinishedArtworkList[$k]['updateTimes'] = $v['update_times'];
                $unFinishedArtworkList[$k]['isEdit'] = 'Y';
                $unFinishedArtworkList[$k]['is_finished'] = $v['is_finished'];
                $unFinishedArtworkList[$k]['last_update_time'] = date('Y-m-d H:i', $v['last_update_time']);
                $unFinishedArtworkList[$k]['finish_percent'] = $percent;
            }
        }
        Util::jsonReturn(['status' => 1000, 'info' => $unFinishedArtworkList]);
    }

    //todo need to config the config json in az_config ,the key is COLOR_CONFIG
    public function getArtworkColorConfig()
    {
        $artworkColorLogic = new ArtworkColorLogic();
        $colorConfig = $artworkColorLogic->getColorList('array');
        Util::jsonReturn(['status' => 1000, 'info' => $colorConfig]);
    }

    // todo need to cache it
    public function getArtworkTagConfig()
    {
        $artworkTagLogic = new ArtworkTagLogic();
        $tagConfig = $artworkTagLogic->getTagList('array');
        Util::jsonReturn(['status' => 1000, 'info' => $tagConfig]);
    }

    public function getArtworkCategoryConfig()
    {
        $artworkCategoryLogic = new ArtworkCategoryLogic();
        $categoryConfig = $artworkCategoryLogic->getCategoryList('array');
        Util::jsonReturn(['status' => 1000, 'info' => $categoryConfig]);
    }

    public function getArtDetail()
    {
        $artId = I('post.id', '', 'number_int');
        $artId2 = I('post.artId', '', 'number_int');
        if (empty($artId) && $artId2) {
            $artId = $artId2;
        }
        if ($artId > 0) {
            $artworkModel = new ArtworkLogic();
            $artInfo = $artworkModel->getArtworkDetail($artId, $this->loginUserId);
            if ($artInfo === false) {
                Util::jsonReturn(null, Code::NOT_FOUND, '该艺术品仅作者可见', var_export($artId, true));
            } elseif (!empty($artInfo)) {
                Util::jsonReturn(['status' => Code::SUCCESS, 'info' => $artInfo]);
            } else {
                Util::jsonReturn(null, Code::NOT_FOUND, '未找到对应的艺术品', var_export($artId, true));
            }
        } else {
            Util::jsonReturn(null, Code::VERIF, '[artId]错误', var_export($artId, true));
        }
    }

    //获取评论列表
    public function getCommentList()
    {
        $id = I('post.id', '', 'number_int');
        $type = I('post.type', '', 'number_int');
        $page = I('post.page', 1);
        $pagesize = I('post.pagesize', 10);
        $commentLogic = new CommentLogic();
        $commentList = $commentLogic->getList($id, $type, $page, $pagesize, $this->loginUserId);
        $commentList['is_repay'] = $this->loginUserId == $commentLogic->getAuthorByIdAndType($id, $type) ? 'Y' : 'N';
        Util::jsonReturn(['status' => Code::SUCCESS, 'info' => $commentList]);
    }

    //回复评论
    public function repayMessage()
    {
        $this->checkLogin();
        $commentId = I('post.commentId', '', 'number_int');
        $repayer = $this->loginUserId;
        $content = I('post.content', '');
        $Commentinfo = M('Comment')->where("id=" . intval($commentId) . " and parent_id=0 and comment_to=" . $this->loginUserId)->find();
        if (!$Commentinfo) {
            Util::jsonReturn(null, Code::SYS_ERR);
        }

        $commentLogic = new CommentLogic();
        $repayInfo = $commentLogic->repay($commentId, $repayer, $content);
        if (!empty($repayInfo)) {
            Util::jsonReturn(['status' => Code::SUCCESS, 'repayInfo' => $repayInfo]);
        } else {
            Util::jsonReturn(null, Code::SYS_ERR, '回复失败');
        }
    }

    //发表评论
    public function comment()
    {
        $this->checkLogin();
        $artId = I('post.artId', '', 'number_int');
        $type = I('post.type', '', 'number_int');
        $commenter = $this->loginUserId;
        $content = I('post.content', '');

        //Util::jsonReturn(null, Code::SYS_ERR, '评论失败');

        if ($type == 1) {
            $artwork = new ArtworkLogic();
            $artworkinfo = $artwork->where(['id' => $artId, 'is_deleted' => 'N'])->find();
            if (!$artworkinfo) {
                Util::jsonReturn(null, Code::SYS_ERR, '记录不存在');
            }
            $comment_to = $artworkinfo['artist'];
        } elseif ($type == 2) {
            $ArtworkUpdate = new ArtworkUpdateLogic();
            $ArtworkUpdateinfo = $ArtworkUpdate->where(['id' => $artId, 'is_deleted' => 'N'])->find();
            if (!$ArtworkUpdateinfo) {
                Util::jsonReturn(null, Code::SYS_ERR, '记录不存在');
            }
            $comment_to = $ArtworkUpdateinfo['artist'];
        }

        $commentLogic = new CommentLogic();
        $commentInfo = $commentLogic->comment($artId, $type, $commenter, $content, $comment_to);
        if (!empty($commentInfo)) {
            Util::jsonReturn(['status' => Code::SUCCESS, 'commentInfo' => $commentInfo]);
        } else {
            Util::jsonReturn(null, Code::SYS_ERR, '评论失败');
        }
    }

    public function updateDetail()
    {
        $all = I('post.');
        Verify::all($all, ['id' => '!@']);
        $updateLogic = new ArtworkUpdateLogic();
        $loginUserId = empty($this->loginUserId) ? 0 : $this->loginUserId;
        $detail = $updateLogic->getDetailWithComment($all['id'], $loginUserId);
        if ($detail == false) {
            Util::jsonReturn(null, Code::SYS_ERR, '该艺术品仅作者可见');
        } else {
            Util::jsonReturn(['status' => Code::SUCCESS, 'info' => $detail]);
        }
    }

    public function updateDetailSimple()
    {
        $all = I('post.');
        Verify::all($all, ['id' => '!@']);
        $updateLogic = new ArtworkUpdateLogic();
        $loginUserId = empty($this->loginUserId) ? 0 : $this->loginUserId;
        $detail = $updateLogic->getDetailWithCommentSimple($all['id'], $loginUserId);
        if ($detail == false) {
            Util::jsonReturn(null, Code::SYS_ERR, '该艺术品仅作者可见');
        } else {
            Util::jsonReturn(['status' => Code::SUCCESS, 'info' => $detail]);
        }
    }

    public function getupdateWit______20170826()
    {
        $id = I('post.id', '', 'number_int');

        $updateLogic = new ArtworkUpdateLogic();
        $loginUserId = empty($this->loginUserId) ? 0 : $this->loginUserId;


        $updateInfo = $updateLogic->where(['id' => $id, 'is_deleted' => 'N'])->find();
        if (!$updateInfo) {
            Util::jsonReturn(null, Code::SYS_ERR);
        }
        $artLogic = new ArtworkLogic();
        $artInfo = $artLogic->where(['id' => $updateInfo['artwork_id'], 'is_deleted' => 'N'])->find();
        if ($artInfo['state'] == 2 && $artInfo['artist'] != $loginUserId) {//画作仅自己看的时候，不是作者就隐藏
            Util::jsonReturn(null, Code::SYS_ERR);
        }

        if (!$artInfo) {
            Util::jsonReturn(null, Code::SYS_ERR, '该艺术品仅作者可见');
        } else {
            $imgUrls = Util::getHtmlImgSrc($updateInfo['wit']);
            $updateInfo['wit'] = $updateLogic->replaceHtmlImgSrc($imgUrls, $updateInfo['wit']);
            $updateInfo = [
                'id' => $updateInfo['id'],

                'wit' => html_entity_decode(trim($updateInfo['wit'])),

            ];

            $info = $updateInfo;
            Util::jsonReturn(['status' => Code::SUCCESS, 'info' => $info]);
        }
    }

    //添加新作品第一步
    public function addArtwrokStepOne()
    {

        $this->checkLogin();  //判断用户是否登录
        $tokenInfo = Token::getTokenInfo($this->token);
        $userId = $tokenInfo['userInfo']['id']; //获取登录用户的uid

        $artworkName = I('post.artworkName'); //艺术品名称
        $state = I('post.state'); //作品权限
        $state = empty($state) ? 1 : $state; //1.所有人可见 2.仅自己可见

        $artworkData = [
            'artist' => $userId, //艺术家ID
            'name' => $artworkName, //作品名称
            'panorama_ids' => '',
            //'category' => 10, //类别
            'update_times' => 0, //更新次数
            'state' => $state, //作品权限
            'create_time' => time(), //作品添加时间
            'last_update_time' => time() //最后更新时间
        ];

        $insert_id = M('Artwork')->add($artworkData);
        //判断是否插入成功
        if ($insert_id > 0) {
            M('User')->where(['id' => $this->loginUserId])->setInc('art_total', 1);
            Util::jsonReturn(['status' => 1000, 'artistId' => $insert_id]);
        } else {
            Util::jsonReturn(null, Code::SYS_ERR);
        }
    }

    private function lock($redis, $key, $expire = 5)
    {
        $thistime = time();
        $lock = $redis->setnx($key, $thistime + $expire);
        // 不能获取锁
        if (!$lock) {
            // 判断锁是否过期
            $lock_time = $redis->get($key);
            // 锁已过期，删除锁，重新获取
            if ($thistime > $lock_time) {
                $redis->del($key);
                $lock = $redis->setnx($key, $thistime + $expire);
            }
        }
        return $lock ? true : false;
    }

    //添加创作记录
    public function addCreateRecord()
    {

        $this->checkLogin();  //判断用户是否登录
        $tokenInfo = Token::getTokenInfo($this->token);
        $userId = $tokenInfo['userInfo']['id']; //获取登录用户的uid

        $artworkId = I('post.artworkId'); //艺术品ID
        //$artworkName = I('post.artworkName'); //艺术品名称


        $wit = I('post.wit'); //创作心路
        $wit = htmlentities($wit, ENT_QUOTES, 'UTF-8'); //创作心路
        $wit = Util::stripHtmlATag($wit); //创作心路
        $wit = Util::cleanSpecific($wit); //创作心路

        $createDate = I('post.createDate'); //创建日期

        /*
        $cover = I('post.cover'); //封面
        $pos = strpos($cover, '?');
        if($pos !==false){
            $cover = substr($cover, 0,$pos);
        }
        */
        $artworkTag = I('post.artworkTag');

        //$story = Util::cleanSpecific(I('post.story')); //故事摘要

        if (trim($wit) == '') {//==============
            Util::jsonReturn(null, Code::SYS_ERR, '不能为空');
        }

        //redis lock
        $expire = 10; //有效期10秒
        $key = 'artzhe_add_update_lock' . intval($userId); //key
        $redis = new \Redis();
        $redis->connect(C('REDIS_HOST'), C('REDIS_PORT'), 1);
        $redis->auth(C('REDIS_PASSWD'));
        if ($this->lock($redis, $key, $expire)) {//加锁成功就入库

            $Artworkinfo = M('Artwork')->where(['id' => intval($artworkId), 'artist' => $userId])->find();
            if (!$Artworkinfo) {
                $redis->del($key);//执行完（Util::jsonReturn），redis解锁
                Util::jsonReturn(null, Code::SYS_ERR, '记录不存在');
            }

            $artworkUpdateLogic = new ArtworkUpdateLogic();

            //判断该作品单次更新的最新的一个wit内容是否相同，不同就添加，避免多次提交
            $last_artwork_update = $artworkUpdateLogic->field('wit,summary')->where('artwork_id=' . intval($artworkId) . ' and artist=' . $userId)->order('id desc')->find();
            if (trim($last_artwork_update['wit']) == trim($wit)) {
                $redis->del($key);//执行完（Util::jsonReturn），redis解锁
                //Util::jsonReturn(['status'=>1000]);
                Util::jsonReturn(null, Code::SYS_ERR, '内容相同，重复提交了');
            }

            $artworkLogic = new ArtworkLogic(); //实例化作品表
            $userLogic = new UserLogic(); //实例化用户表

            $updateNumber = $artworkLogic->getUpdateNumber($artworkId); //获取某艺术品更新次数
            $updateNumber = empty($updateNumber) ? 0 : $updateNumber;
            $updateNumber++;

            $map['uid'] = $userId;
            $map['artworkid'] = $artworkId;
            $map['type'] = 4;
            $res = M('ArtzheCustom')->where($map)->find();
            if (!empty($artworkTag)) {
                if (empty($res)) {
                    $customData = [
                        'uid' => $userId, //用户ID
                        'artworkid' => $artworkId, //艺术品ID
                        'cn_name' => $artworkTag, //用户自定义标签
                        'type' => 4, //4表示标签
                        'create_time' => time() //添加时间
                    ];
                    M('ArtzheCustom')->add($customData);
                } else {
                    $customData = [
                        'cn_name' => $artworkTag, //用户自定义标签
                    ];
                    $w['id'] = $res['id'];
                    M('ArtzheCustom')->where($w)->save($customData);
                }
            }

            //更新画作信息
            $artwrokData = [
                // 'cover' => $cover, //封面
                'update_times' => $updateNumber, //更新次数
                'last_update_time' => time(),
                // 'story' => $story
            ];

            if (trim($Artworkinfo['cover']) == '' && trim($Artworkinfo['panorama_ids']) == '') {//作品没有封面和全局图，抽取内容的第一张图做封面
                preg_match_all('/&lt;img.*?src=&quot;(.*?)&quot;.*?&gt;/is', $wit, $array);
                $first_pic = trim($array[1][0]);
                if ($first_pic != '') {
                    $artwrokData['cover'] = $first_pic;
                }
            }

            //更新作品信息
            $artworkLogic->ArtUpdate($artwrokData, $artworkId);
            $messageLogic = new MessageLogic();
            $messageLogic->artistUpdate($artworkId);

            /*$draftModel = M('ArtworkDraft');
            $result = $draftModel->field('id')->where(['artist_id'=>$userId,'artwork_id'=>$artworkId])->find();
            if(!empty($result)){
                //$draftModel->delete($result['id']);  //删除草稿
                $draftModel->where(['artist_id'=>$userId,'artwork_id'=>$artworkId])->setField('number',$updateNumber+1);
            }*/

            //添加创作记录
            $artworkUpdateLogic = new ArtworkUpdateLogic();
            $artworkUpdateData = [
                'artist' => $userId, //登录的用户ID(即艺术者ID)
                'artwork_id' => $artworkId, //艺术品ID
                'number' => $updateNumber, //更新次数
                'wit' => $wit, //创作心路
                //'cover'=>$cover, //封面
                'create_date' => $createDate, //创建日期
                'create_time' => time(), //创建时间
                'last_update_time' => time(), //上次更新时间
                //'summary' => $story //摘要
            ];


            $artworkUpdateId = $artworkUpdateLogic->addOne($artworkUpdateData); //添加一条创作记录
            $thistime = time();
            $userLogic->where(['id' => $this->loginUserId])->save(['last_update_time' => $thistime, 'last_add_artupdate_time' => $thistime, 'last_add_artupdate_artid' => $artworkId]); //艺术者最后更新作品时间
            $messageLogic = new MessageLogic();
            $messageLogic->artworkUpdate($artworkId);
            $userInfo = M('user')->field('face,nickname,motto')->find($userId);
            $artLogic = new ArtworkLogic();
            $artInfo = $artLogic->where(['id' => intval(artworkId), 'is_deleted' => 'N'])->find();

            //封面图片判断,优先全局图>封面图>内容里面的图
            if (trim($artInfo['panorama_ids']) != '') {
                $images = explode(',', $artInfo['panorama_ids']);
                $cover = $images[0];
            } elseif (trim($artInfo['cover']) != '') {
                $cover = $artInfo['cover'];
            } else {
                preg_match_all('/&lt;img.*?src=&quot;(.*?)&quot;.*?&gt;/is', $wit, $array);
                $first_pic = trim($array[1][0]);
                $cover = $first_pic;
            }

            $share['face'] = Util::getImageResize($userInfo['face'], Image::faceWidth, Image::faceHeight);
            $share['name'] = $userInfo['nickname'];
            $share['category'] = $artworkTag;
            $share['cover'] = trim($cover) == '' ? '' : Util::getImageResize($cover, Image::recommendListWidth, Image::recommendListHeight);
            $share['link'] = C('m_site') . '/artwork/update/' . $artworkUpdateId;
            $share['motto'] = empty($userInfo['motto']) ? "" : $userInfo['motto'];

            //$share['artname'] = $artworkName;
            $resInfo = M('artwork')->field('name')->find($artworkId);
            if (strpos("{$resInfo['name']}", "《") !== false) {
                $artName = $resInfo['name'];
            } else {
                $artName = '《' . $resInfo['name'] . '》';
            }
            $redis->del($key);//执行完，redis解锁
            if ($artworkUpdateId) {
                Util::jsonReturn([
                    'status' => 1000,
                    'EditLockEnable'=>(int)C('ARTWORK_UPDATE')['EDIT_LOCK_ENABLE'],
                    'shareTitle' => "{$userInfo['nickname']}{$artName}更新{$updateNumber}",
                    'shareDesc' => html_deconvert_content_cut($wit, 45),
                    'shareImg' => Util::getFillImage(Util::getImgUrlById(trim($cover) != '' ? $cover : C('SHARE_IMG_DEFAULT')), Image::faceWidth, Image::faceHeight),
                    'shareLink' => C('m_site') . '/artwork/update/' . $artworkUpdateId,
                    'shareInfo' => $share
                ]);
            } else {
                Util::jsonReturn(null, Code::SYS_ERR);
            }
        } else {
            Util::jsonReturn(null, Code::SYS_ERR, 'redis error');
        }
    }

    //保存创作记录到草稿箱
    public function addArtworkToDraft()
    {

        $this->checkLogin();  //判断用户是否登录
        $tokenInfo = Token::getTokenInfo($this->token);
        $userId = $tokenInfo['userInfo']['id']; //获取登录用户的uid

        $artworkId = I('post.artworkId'); //艺术品ID

        $wit = I('post.wit'); //创作心路
        $wit = htmlentities($wit, ENT_QUOTES, 'UTF-8'); //创作心路
        $wit = Util::stripHtmlATag($wit); //创作心路
        $wit = Util::cleanSpecific($wit); //创作心路
        $createDate = I('post.createDate'); //创建日期
        $cover = I('post.cover'); //封面
        $pos = strpos($cover, '?');
        if ($pos !== false) {
            $cover = substr($cover, 0, $pos);
        }

        $artworkTag = I('post.artworkTag');

        $story = Util::cleanSpecific(I('post.story')); //故事摘要

        $drafId = I('post.drafId'); //草稿箱ID

        $draftModel = M('ArtworkDraft'); //实例化草稿箱表

        if (empty($drafId) && empty($artworkId)) {
            Util::jsonReturn(null, Code::SYS_ERR);
        }
        if (empty($drafId)) {
            if (!empty($artworkId)) {
                $Artworkinfo = M('Artwork')->where("id=" . intval($artworkId) . " and artist=" . $userId)->find();
                if (!$Artworkinfo) {
                    Util::jsonReturn(null, Code::SYS_ERR);
                }
            }
        } else {
            $ArtworkDraftinfo = M('ArtworkDraft')->where("id=" . intval($drafId) . " and artist_id=" . $userId)->find();
            if (!$ArtworkDraftinfo) {
                Util::jsonReturn(null, Code::SYS_ERR);
            }
        }

        //判断艺术品ID是否为空,如果是空的代表新作品
        $data = [];
        //表示不是从草稿箱进行的编辑
        if (empty($drafId)) {
            if (!empty($artworkId)) {

                $res = M('Artwork')->field('name')->find($artworkId);
                $res2 = M('ArtworkUpdate')->field('number')->where(['artwork_id' => $artworkId])->order('create_time DESC')->find();
                $res3 = $draftModel->where(['artwork_id' => $artworkId])->find();

                $number = empty($res2) ? 0 : $res2['number']; //更新编号

                if (empty($res3)) {
                    $data['artist_id'] = $userId;
                    $data['artwork_id'] = $artworkId;
                    $data['artname'] = $res['name'];
                    $data['number'] = $number + 1;
                    $data['create_date'] = $createDate;
                    $data['wit'] = $wit;
                    $data['cover'] = empty($cover) ? '' : $cover;
                    $data['tag'] = empty($artworkTag) ? '' : $artworkTag;
                    $data['story'] = empty($story) ? '' : $story;

                    $num = $draftModel->add($data);
                } else {
                    $data['number'] = $number + 1;
                    $data['create_date'] = $createDate;
                    $data['wit'] = $wit;
                    $data['cover'] = empty($cover) ? '' : $cover;
                    $data['tag'] = empty($artworkTag) ? '' : $artworkTag;
                    $data['story'] = empty($story) ? '' : $story;

                    $num = $draftModel->where(['artwork_id' => $artworkId])->save();
                }
            }
        } else {

            $data['create_date'] = $createDate;
            $data['wit'] = $wit;
            $data['cover'] = $cover;
            $data['tag'] = $artworkTag;
            $data['story'] = $story;

            $where['id'] = $drafId;
            $num = $draftModel->where($where)->save($data);
        }

        if ($num > 0) {
            Util::jsonReturn(['status' => 1000]);
        } else {
            Util::jsonReturn(['status' => 1000]);
        }
    }

    //获取创作记录列表
    public function getRecordList()
    {

        //判断用户是否登录
        $this->checkLogin();

        $userid = $this->loginUserId;

        $artId = I('post.artId', '', 'number_int'); //艺术品id
        $updateLogic = new ArtworkUpdateLogic();

        //判断该作品是否属于登录用户
        //  if(!M('ArtworkDraft')->where(['artwork_id' => $artId,'artist_id'=>$userid])->find()&&!$updateLogic->where(['artwork_id' => $artId,'is_deleted' => 'N','artist'=>$userid])->find()&&!M('Artwork')->where(['id' => $artId,'is_deleted' => 'N','artist'=>$userid])->find()){
        //都为空表示不属于
        //     Util::jsonReturn(null, Code::SYS_ERR);
        // }

        $i = 0;
        $upRecord = [];

        $res = M('ArtworkDraft')->where(['artwork_id' => $artId])->find(); //查询草稿箱记录
        $list = $updateLogic->where(['artwork_id' => $artId, 'is_deleted' => 'N'])->order('create_time DESC')->select();
        $artInfo = M('Artwork')->field('story,color_ids,shape,length,width,diameter,panorama_ids,topography_ids,state,cover')->find($artId); //获取画作故事

        //状态
        $color_status = trim($artInfo['color_ids']) != '' ? 1 : 0;
        $shape_status = $artInfo['shape'] == 1 || $artInfo['shape'] == 2 ? 1 : 0;
        $size_status = 0;
        if ($artInfo['shape'] == 1) {
            $size_status = $artInfo['length'] > 0 && $artInfo['width'] > 0 ? 1 : 0;
        } elseif ($artInfo['shape'] == 2) {
            $size_status = $artInfo['diameter'] > 0 ? 1 : 0;
        }
        //$artzhe_custom = M('artzhe_custom');
       // $artzhe_custom_info = $artzhe_custom->where(['artworkid' => intval($artId)])->find();
        //$tag_status = $artzhe_custom_info ? 1 : 0;

        $story_status = trim($artInfo['story']) != '' ? 1 : 0;
        $panorama_status = trim($artInfo['panorama_ids']) != '' ? 1 : 0;
        $topography_status = trim($artInfo['topography_ids']) != '' ? 1 : 0;
        $cover_status = trim($artInfo['cover']) != '' ? 1 : 0;
        //状态 end


        if (!empty($res)) {


            preg_match_all('/&lt;img.*?src=&quot;(.*?)&quot;.*?&gt;/is', $res['wit'], $array);
            $img = empty($array[1]) ? [] : Util::getImageResizes($array[1], 300, 300);
            $img = array_slice($img, 0, 3);

            $upRecord[$i]['id'] = $res['id'];
            $upRecord[$i]['create_date'] = $res['create_date'];
            $upRecord[$i]['number'] = $res['number']; //更新记录号码
            $upRecord[$i]['summary'] = trim($res['wit']) == '' ? '' : html_deconvert_content_cut($res['wit'], 45);
            $upRecord[$i]['isEdit'] = 'Y';
            //$upRecord[$i]['img'] = Util::getHtmlImgSrc($res['wit']);
            $upRecord[$i]['img'] = $img;
            $upRecord[$i]['flag'] = 1;  //草稿箱

            //获取更新记录里面的视频
            preg_match_all('/&lt;video.*?poster=&quot;(.*?)&quot;.*?&gt;/is', $res['wit'], $match);
            $upRecord[$i]['video'] = empty($match[1]) ? '' : $match[1][0];

            $i++;
        }
        if (!empty($list)) {
            $time = time();

            foreach ($list as $key => $value) {
                preg_match_all('/&lt;img.*?src=&quot;(.*?)&quot;.*?&gt;/is', $value['wit'], $array);
                $img = empty($array[1]) ? [] : Util::getImageResizes($array[1], 300, 300);
                $img = array_slice($img, 0, 3);


                $upRecord[$key + $i]['id'] = $value['id'];
                $upRecord[$key + $i]['create_date'] = $value['create_date'];
                $upRecord[$key + $i]['number'] = $value['number']; //更新记录号码
                $upRecord[$key + $i]['summary'] = trim($value['wit']) == '' ? '' : html_deconvert_content_cut($value['wit'], 45);
                //$isEdit = $time - $value['create_time'] >= 86400 ? false : true;
                //$upRecord[$key+$i]['isEdit'] = $isEdit && $value['edit_count'] < 1 ? 'Y' : 'N';
                $upRecord[$key + $i]['isEdit'] = 'Y';
                //$upRecord[$key]['cover'] = Util::getImageToSq($value['cover']);
                //$upRecord[$key + $i]['img'] = Util::getHtmlImgSrc($value['wit']);
                $upRecord[$key + $i]['img'] = $img;
                $upRecord[$key + $i]['flag'] = 2; //更新记录

                //获取更新记录里面的视频
                preg_match_all('/&lt;video.*?poster=&quot;(.*?)&quot;.*?&gt;/is', $value['wit'], $match);
                $upRecord[$key + $i]['video'] = empty($match[1]) ? '' : $match[1][0];
            }
        }

        $artworkModel = M('Artwork'); //实例化艺术者画作表
        $artcusModel = M('ArtzheCustom'); //实例化自定义表

        $artworkData = $artworkModel->field('id,name,state,color_ids,shape,length,width,diameter,panorama_ids,topography_ids,category,subject_ids,style_ids,story')->find($artId);
        $c = $artcusModel->field('cn_name')->where(['artworkid' => $artId, 'type' => '1'])->find();
        $s = $artcusModel->field('cn_name')->where(['artworkid' => $artId, 'type' => '2'])->find();
        $s2 = $artcusModel->field('cn_name')->where(['artworkid' => $artId, 'type' => '3'])->find();

        $num = 0; //统计数
        $percent = 0; //百分比

        //先判断是方形还是圆形
        if (!empty($artworkData)) {
            if (1 == $artworkData['shape']) {
                //方形
                if (!empty($artworkData['name'])) {
                    $num += 1;
                }
                if (!empty($artworkData['state'])) {
                    $num += 1;
                }
                if (!empty($artworkData['color_ids'])) {
                    $num += 1;
                }
                if (intval($artworkData['length']) > 0 && intval($artworkData['width']) > 0) {
                    $num += 1;
                }
                if (!empty($artworkData['panorama_ids'])) {
                    $num += 1;
                }
                if (!empty($artworkData['topography_ids'])) {
                    $num += 1;
                }
                if ($artworkData['category'] != -1 || !empty($c) || !empty($artworkData['subject_ids']) || !empty($s) || !empty($artworkData['style_ids']) || !empty($s2)) {
                    $num += 1;
                }
                if (!empty($artworkData['story'])) {
                    $num += 1;
                }
                $percent = round($num / 8 * 100); //计算百分比
            } else {
                //圆形
                if (!empty($artworkData['name'])) {
                    $num += 1;
                }
                if (!empty($artworkData['state'])) {
                    $num += 1;
                }
                if (!empty($artworkData['color_ids'])) {
                    $num += 1;
                }
                if (floatval($artworkData['diameter']) > 0) {
                    $num += 1;
                }
                if (!empty($artworkData['panorama_ids'])) {
                    $num += 1;
                }
                if (!empty($artworkData['topography_ids'])) {
                    $num += 1;
                }
                if ($artworkData['category'] != -1 || !empty($c) || !empty($artworkData['subject_ids']) || !empty($s) || !empty($artworkData['style_ids']) || !empty($s2)) {
                    $num += 1;
                }
                if (!empty($artworkData['story'])) {
                    $num += 1;
                }
                $percent = round($num / 8 * 100); //计算百分比
            }
        } else {
            $percent = 0;
        }

        $list = empty($upRecord) ? [] : $upRecord;
        $artwork = [
            'percent' => $percent,
            'color_status' => $color_status,
            'shape_status' => $shape_status,
            'size_status' => $size_status,
            'tag_status' => trim($c['cn_name'])!=''||trim($s['cn_name'])!=''||trim($s2['cn_name'])!=''?1:0,
            'story_status' => $story_status,
            'panorama_status' => $panorama_status,
            'topography_status' => $topography_status,
            'cover_status' => $cover_status
        ];
        Util::jsonReturn(['status' => 1000, 'info' => $list, 'artwork' => $artwork]);
    }

    //添加创作属性
    public function addArtworkAttribute()
    {

        //判断用户是否登录
        $this->checkLogin();

        $tokenInfo = Token::getTokenInfo($this->token);
        $userId = $tokenInfo['userInfo']['id']; //获取登录用户的uid

        $artworkId = I('post.artworkId', '', 'number_int'); //艺术品id
        $artworkName = I('post.artworkName'); //艺术品名称
        $state = I('post.state', 1, 'number_int'); //1.所有人可见 2.仅自己可见
        $color_ids = I('post.color'); //色调
        $shape = I('post.shape'); //类型 1.方形 2.圆形
        $length = I('post.length'); //长
        $width = I('post.width'); //宽
        $diameter = I('post.diameter'); //直径
        $panorama_ids = trim(I('post.panorama')); //全景图
        $topography_ids = I('post.topography'); //局部图
        $category = I('post.category'); //类别
        $subject = I('post.subject'); //题材
        $style = I('post.style'); //风格
        $story = I('post.story'); //创作描述

        $cover = trim(I('post.cover')); //封面


        $rules = array(
            array('artworkId', 'require', 'artworkId必须！', 1),
            // array('color','require','color必须！',1),
            //array('shape','require','形状必须！',1),
            //array('panorama','require','全景图必须！',1),
            //array('topography','require','局部图必须！',1),
            //array('story','require','创作描述必须！',1),
            // array('cover','require','封面必须！',1),

        );
        $Checker = M('artwork');
        if (!$Checker->validate($rules)->create()) {
            // 如果创建失败 表示验证没有通过 输出错误提示信息
            Util::jsonReturn(null, Code::SYS_ERR, $Checker->getError());
            exit();
        }


        $length = floatval($length);
        $width = floatval($width);
        $diameter = floatval($diameter);


        $num = 0; //计数
        $percent = 0; //百分比


        $Artworkinfo = M('Artwork')->where(['id' => $artworkId, 'artist' => $userId])->find();
        if (!$Artworkinfo) {
            Util::jsonReturn(null, Code::SYS_ERR);
        }


        if (1 == $shape) {
            //长方形
            if (!empty($artworkName)) {
                $artworkData = [
                    'name' => $artworkName, //画作名称
                    'state' => $state, //权限
                    'color_ids' => $color_ids, //色调
                    'shape' => 1, //形状
                    'length' => $length, //长
                    'width' => $width, //宽
                    'panorama_ids' => $panorama_ids, //全景图
                    'topography_ids' => $topography_ids, //局部图
                    'story' => $story, //创作描述
                    'last_update_time' => time() //最后一次更新时间
                ];
                //$num += 1;
            } else {
                $artworkData = [
                    'state' => $state, //权限
                    'color_ids' => $color_ids, //色调
                    'shape' => 1, //形状
                    'length' => $length, //长
                    'width' => $width, //宽
                    'panorama_ids' => $panorama_ids, //全景图
                    'topography_ids' => $topography_ids, //局部图
                    'story' => $story, //创作描述
                    'last_update_time' => time() //最后一次更新时间
                ];
            }
            if (!empty($color_ids)) {
                $num += 1;
            }
            if ($length > 0 && $width > 0) {
                $num += 1;
            }
            if (!empty($panorama_ids)) {
                $num += 1;
            }
            if (!empty($topography_ids)) {
                $num += 1;
            }
            if (!empty($category) || !empty($subject) || !empty($style)) {
                $num += 1;
            }
            if (!empty($story)) {
                $num += 1;
            }
            $percent = round($num / 6 * 100); //计算百分比

            $recommendLogic = new RecommendLogic(); //实例化推荐逻辑
            //if(100 == $percent){
            $res = M('ArtworkWeight')->where(['artist' => $userId, 'artwork_id' => $artworkId])->find();
            //属性完整度达到100，就放进推荐列表    --------------20170806任何时候都保存进权重表，不需要100%
            if (empty($res)) {
                $recommendLogic->addArtwork($artworkId);
            }
            //}
        } else if (2 == $shape) {
            //圆形
            if (!empty($artworkName)) {
                $artworkData = [
                    'name' => $artworkName, //画作名称
                    'state' => $state, //权限
                    'color_ids' => $color_ids, //色调
                    'shape' => 2, //形状
                    'diameter' => $diameter, //长
                    'panorama_ids' => $panorama_ids, //全景图
                    'topography_ids' => $topography_ids, //局部图
                    'story' => $story, //创作描述
                    'last_update_time' => time() //最后一次更新时间
                ];
                //$num += 1;
            } else {
                $artworkData = [
                    'state' => $state, //权限
                    'color_ids' => $color_ids, //色调
                    'shape' => 2, //形状
                    'diameter' => $diameter, //长
                    'panorama_ids' => $panorama_ids, //全景图
                    'topography_ids' => $topography_ids, //局部图
                    'story' => $story, //创作描述
                    'last_update_time' => time() //最后一次更新时间
                ];
            }
            if (!empty($color_ids)) {
                $num += 1;
            }
            if ($diameter > 0) {
                $num += 1;
            }
            if (!empty($panorama_ids)) {
                $num += 1;
            }
            if (!empty($topography_ids)) {
                $num += 1;
            }
            if (!empty($category) || !empty($subject) || !empty($style)) {
                $num += 1;
            }
            if (!empty($story)) {
                $num += 1;
            }
            $percent = round($num / 6 * 100); //计算百分比
            $recommendLogic = new RecommendLogic(); //实例化推荐逻辑
            // if(100 == $percent){
            $res = M('ArtworkWeight')->where(['artist' => $userId, 'artwork_id' => $artworkId])->find();
            //属性完整度达到100，就放进推荐列表--------------20170806任何时候都保存进权重表，不需要100%
            if (empty($res)) {
                $recommendLogic->addArtwork($artworkId);
            }
            //}
        } else {
            $artworkData = [
                'state' => $state, //权限
                'color_ids' => $color_ids, //色调
                'shape' => 0, //形状 不是圆形也不是方形
                'panorama_ids' => $panorama_ids, //全景图
                'topography_ids' => $topography_ids, //局部图
                'story' => $story, //创作描述
                'last_update_time' => time() //最后一次更新时间
            ];

            if (!empty($color_ids)) {
                $num += 1;
            }
            if (!empty($panorama_ids)) {
                $num += 1;
            }
            if (!empty($topography_ids)) {
                $num += 1;
            }
            if (!empty($category) || !empty($subject) || !empty($style)) {
                $num += 1;
            }
            if (!empty($story)) {
                $num += 1;
            }
            $percent = round($num / 5 * 100); //计算百分比
            $recommendLogic = new RecommendLogic(); //实例化推荐逻辑
            // if(100 == $percent){
            $res = M('ArtworkWeight')->where(['artist' => $userId, 'artwork_id' => $artworkId])->find();
            //属性完整度达到100，就放进推荐列表--------------20170806任何时候都保存进权重表，不需要100%
            if (empty($res)) {
                $recommendLogic->addArtwork($artworkId);
            }
            // }
        }

        $artworkModel = M('Artwork'); //实例化画作表
        $cusModel = M('ArtzheCustom');

        $a = $cusModel->where(['uid' => $userId, 'artworkid' => $artworkId, 'type' => 1])->find();
        $b = $cusModel->where(['uid' => $userId, 'artworkid' => $artworkId, 'type' => 2])->find();
        $c = $cusModel->where(['uid' => $userId, 'artworkid' => $artworkId, 'type' => 3])->find();

        $cat = [
            1 => '油画',
            2 => '水彩',
            3 => '插画',
            4 => '素描',
            5 => '工笔',
            6 => '国画',
            7 => '版画',
            8 => '漆画',
            9 => '丙烯',
            10 => '其它',
        ];

        if (!empty($category)) {
            $zl = strpos($category, "，") !== false ? str_replace("，", ",", $category) : $category;
            if (empty($a)) {
                $cusData = [
                    'uid' => $userId,
                    'artworkid' => $artworkId,
                    'cn_name' => $zl,
                    'type' => 1,
                    'create_time' => time()
                ];
                $cusModel->add($cusData);
            } else {
                $cusData = [
                    'cn_name' => $zl
                ];
                $cusModel->where(['uid' => $userId, 'artworkid' => $artworkId, 'type' => 1])->save($cusData);
            }

            $ca = trim($zl, ',');
            $arr = explode(',', $ca);

            $temp = '';
            for ($i = 0; $i < count($arr); $i++) {
                if ($arr[$i] == $cat[1]) {
                    $temp .= '1' . ',';
                }
                if ($arr[$i] == $cat[2]) {
                    $temp .= '2' . ',';
                }
                if ($arr[$i] == $cat[3]) {
                    $temp .= '3' . ',';
                }
                if ($arr[$i] == $cat[4]) {
                    $temp .= '4' . ',';
                }
                if ($arr[$i] == $cat[5]) {
                    $temp .= '5' . ',';
                }
                if ($arr[$i] == $cat[6]) {
                    $temp .= '6' . ',';
                }
                if ($arr[$i] == $cat[7]) {
                    $temp .= '7' . ',';
                }
                if ($arr[$i] == $cat[8]) {
                    $temp .= '8' . ',';
                }
                if ($arr[$i] == $cat[9]) {
                    $temp .= '9' . ',';
                }
                if ($arr[$i] == $cat[10]) {
                    $temp .= '10' . ',';
                }
            }

            $cat = trim($temp, ',');

            if (!empty($cat)) {
                $data = ['category' => $cat];
            } else {
                $data = ['category' => 10];
            }
            M('Artwork')->where(['id' => $artworkId])->save($data);
        } else {
            $cusModel->where(['uid' => $userId, 'artworkid' => $artworkId, 'type' => 1])->save(['cn_name' => '']);//没提交清空内容
        }

        if (!empty($subject)) {
            $zt = strpos($subject, "，") !== false ? str_replace("，", ",", $subject) : $subject;
            if (empty($b)) {
                $cusData = [
                    'uid' => $userId,
                    'artworkid' => $artworkId,
                    'cn_name' => $zt,
                    'type' => 2,
                    'create_time' => time()
                ];
                $cusModel->add($cusData);
            } else {
                $cusData = [
                    'cn_name' => $zt
                ];
                $cusModel->where(['uid' => $userId, 'artworkid' => $artworkId, 'type' => 2])->save($cusData);
            }
        } else {
            $cusModel->where(['uid' => $userId, 'artworkid' => $artworkId, 'type' => 2])->save(['cn_name' => '']);
        }

        if (!empty($style)) {
            $fg = strpos($style, "，") !== false ? str_replace("，", ",", $style) : $style;
            if (empty($c)) {
                $cusData = [
                    'uid' => $userId,
                    'artworkid' => $artworkId,
                    'cn_name' => $fg,
                    'type' => 3,
                    'create_time' => time()
                ];
                $cusModel->add($cusData);
            } else {
                $cusData = [
                    'cn_name' => $fg
                ];
                $cusModel->where(['uid' => $userId, 'artworkid' => $artworkId, 'type' => 3])->save($cusData);
            }
        } else {
            $cusModel->where(['uid' => $userId, 'artworkid' => $artworkId, 'type' => 3])->save(['cn_name' => '']);
        }

        $artworkData['finish_percent'] = $percent;//完成百分百
        if ($Artworkinfo['finish_percent'] != 100 && $percent == 100) {
            $artworkData['finish_percent_time'] = time();//设置100%时候的时间
        }
        $artworkData['cover'] = $cover;//封面
        $rownum = $artworkModel->where(['id' => $artworkId])->save($artworkData);

        if ($Artworkinfo['state'] != $state) {//状态变化时，修改用户表最新的last_add_artupdate_artid

            $artwork = M('artwork');
            $artwork_last_update = $artwork
                ->field('B.artwork_id,B.create_time')
                ->join('az_artwork_update B on az_artwork.id=B.artwork_id')
                ->where("az_artwork.artist=" . intval($userId) . " and az_artwork.state=1 and az_artwork.is_deleted='N' and B.is_deleted='N'")
                ->order('B.id desc')->find();

            //print_r($artwork_last_update);
            $userLogic = new UserLogic();
            $userLogic->where(['id' => $this->loginUserId])->save(['last_add_artupdate_time' => intval($artwork_last_update['create_time']), 'last_add_artupdate_artid' => intval($artwork_last_update['artwork_id'])]);


        }

        if ($rownum > 0) {
            //M('User')->where(['id' => $this->loginUserId])->setInc('art_total',1);
            Util::jsonReturn(['status' => 1000, 'percent' => $percent]);
        } else {
            Util::jsonReturn(null, Code::SYS_ERR);
        }
    }

    //获取可编辑的作品列表
    public function getArtWorkListByAuthor()
    {
        //判断用户是否登录
        $this->checkLogin();

        $tokenInfo = Token::getTokenInfo($this->token);
        $userId = $tokenInfo['userInfo']['id']; //获取登录用户的uid

        //获取登录艺术者所有可编辑的作品列表
        $data = M('artwork')->field('id,name')->where(['artist' => $userId, 'is_deleted' => 'N', 'is_finished' => 'N'])->order('last_update_time DESC')->select();

        $list = empty($data) ? [] : $data;
        Util::jsonReturn(['status' => 1000, 'info' => ['list' => $list]]);
    }

    //获取编辑草稿箱或编辑创作记录
    public function getEditRecordContent()
    {
        //判断用户是否登录
        $this->checkLogin();

        $tokenInfo = Token::getTokenInfo($this->token);
        $userId = $tokenInfo['userInfo']['id']; //获取登录用户的uid

        $artworkUpdateId = I('post.artworkUpdateId'); //艺术品更新id
        $drafId = I('post.drafId'); //草稿箱Id

        $artworkUpdateModel = M('ArtworkUpdate'); //实例化更新记录表
        $draftModel = M('ArtworkDraft'); //实例化草稿箱表
        $customModel = M('ArtzheCustom');

        $record = [];
        if (!empty($artworkUpdateId)) {
            //获取更新记录详情
            $upInfo = $artworkUpdateModel->field('id,artist,artwork_id,number,wit,cover,summary,create_date')->find($artworkUpdateId);
            $artworkInfo = M('Artwork')->field('name')->find($upInfo['artwork_id']);
            $tag = $customModel->field('cn_name')->where(['uid' => $userId, 'artworkid' => $upInfo['artwork_id'], 'type' => 4])->find();

            if (empty($upInfo)) {
                $record = [];
            } else {
                $vowels = array("\r\n", "\n", "\r", "\t");
                $wit = str_replace($vowels, "<br>", html_entity_decode($upInfo['wit'], ENT_QUOTES, 'UTF-8'));
                $record = [
                    'id' => $upInfo['id'], //更新ID
                    'artist_id' => $upInfo['artist'], //艺术者ID
                    'artwork_name' => $artworkInfo['name'], //艺术品名称
                    'artwork_id' => $upInfo['artwork_id'], //艺术品ID
                    'number' => $upInfo['number'], //更新编号
                    'wit' => $wit, //创作心路
                    'summary' => $upInfo['summary'], //摘要
                    'create_date' => $upInfo['create_date'], //创建日期
                    'cover' => $upInfo['cover'], //封面
                    'tag' => empty($tag) ? '' : $tag['cn_name'], //标签
                    'flag' => 2 //更新记录
                ];
            }
        }

        if (!empty($drafId)) {
            //获取草稿箱记录详情
            $draftInfo = $draftModel->field('id,artist_id,artwork_id,artname,number,wit,create_date,cover,tag,story')->find($drafId);
            if (empty($draftInfo)) {
                $record = [];
            } else {
                $record = [
                    'id' => $draftInfo['id'], //草稿箱ID
                    'artist_id' => $draftInfo['artist_id'], //艺术者ID
                    'artwork_name' => $draftInfo['artname'], //艺术品名称
                    'artwork_id' => $draftInfo['artwork_id'], //艺术品ID
                    'number' => $draftInfo['number'], //更新编号
                    'wit' => html_entity_decode($draftInfo['wit'], ENT_QUOTES, 'UTF-8'), //创作心路
                    'summary' => empty($draftInfo['story']) ? '' : $draftInfo['story'], //摘要
                    'create_date' => $draftInfo['create_date'], //创建日期
                    'cover' => empty($draftInfo['cover']) ? '' : $draftInfo['cover'], //封面
                    'tag' => empty($draftInfo['tag']) ? '' : $draftInfo['tag'], //标签
                    'flag' => 1 //更新记录
                ];
            }
        }

        $list = empty($record) ? [] : $record;

        Util::jsonReturn(['status' => 1000, 'info' => $list]);
    }

    //获取画作属性完整度百分比
    public function getAttributePercent()
    {

        $artworkId = I('post.artworkId', '', 'number_int'); //艺术品id

        $artworkModel = M('Artwork'); //实例化艺术者画作表
        $artcusModel = M('ArtzheCustom'); //实例化自定义表
        $colorModel = M('ArtworkColor'); //实例化色调表

        $artworkData = $artworkModel->field('id,name,state,color_ids,shape,length,width,diameter,panorama_ids,topography_ids,category,subject_ids,style_ids,story,is_finished,cover')->find($artworkId);
        $c = $artcusModel->field('cn_name')->where(['artworkid' => $artworkId, 'type' => '1'])->find();
        $s = $artcusModel->field('cn_name')->where(['artworkid' => $artworkId, 'type' => '2'])->find();
        $s2 = $artcusModel->field('cn_name')->where(['artworkid' => $artworkId, 'type' => '3'])->find();

        $num = 0; //统计数
        $percent = 0; //百分比
        $color = [];

        //先判断是方形还是圆形
        if (!empty($artworkData)) {
            if (1 == $artworkData['shape']) {
                //方形
                if (!empty($artworkData['name'])) {
                    $num += 1;
                }
                if (!empty($artworkData['state'])) {
                    $num += 1;
                }
                if (!empty($artworkData['color_ids'])) {
                    $num += 1;
                    $map['id'] = ['in', $artworkData['color_ids']];
                    $color = $colorModel->field('id,cn_name')->where($map)->select();
                }
                if (intval($artworkData['length']) > 0 && intval($artworkData['width']) > 0) {
                    $num += 1;
                }
                if (!empty($artworkData['panorama_ids'])) {
                    $num += 1;
                    $panorama_img = explode(',', $artworkData['panorama_ids']);
                } else {
                    $panorama_img = [];
                }
                if (!empty($artworkData['topography_ids'])) {
                    $num += 1;
                    $topography_img = explode(',', $artworkData['topography_ids']);
                } else {
                    $topography_img = [];
                }
                if ($artworkData['category'] != -1 || !empty($c)) {
                    //$num += 1;
                    /*if(!empty($artworkData['category']) && $artworkData['category']!='10'){
                        $res = M('ArtworkCategory')->where(['id'=>$artworkData['category']])->getField('cn_name');
                        $category = empty($res)? "":$res;
                    }else{
                        $category = empty($c['cn_name'])?'':$c['cn_name'];
                    }*/
                    $category = empty($c['cn_name']) ? '' : $c['cn_name'];//直接取自定义表
                } else {
                    $category = '';
                }
                if (!empty($artworkData['subject_ids']) || !empty($s)) {
                    //$num += 1;
                    $subject = !empty($artworkData['subject_ids']) ? $artworkData['subject_ids'] : $s['cn_name'];
                } else {
                    $subject = '';
                }
                if (!empty($artworkData['style_ids']) || !empty($s2)) {
                    //$num += 1;
                    $style = !empty($artworkData['style_ids']) ? $artworkData['style_ids'] : $s2['cn_name'];
                } else {
                    $style = '';
                }
                if (!empty($c) || !empty($s) || !empty($s2) || !empty($artworkData['category']) || !empty($artworkData['subject_ids']) || !empty($artworkData['style_ids'])) {
                    $num += 1;
                }
                if (!empty($artworkData['story'])) {
                    $num += 1;
                }
                $percent = round($num / 8 * 100); //计算百分比
            } else {
                //圆形
                if (!empty($artworkData['name'])) {
                    $num += 1;
                }
                if (!empty($artworkData['state'])) {
                    $num += 1;
                }
                if (!empty($artworkData['color_ids'])) {
                    $num += 1;
                    $map['id'] = ['in', $artworkData['color_ids']];
                    $color = $colorModel->field('id,cn_name')->where($map)->select();
                }
                if (floatval($artworkData['diameter']) > 0) {
                    $num += 1;
                }
                if (!empty($artworkData['panorama_ids'])) {
                    $num += 1;
                    $panorama_img = explode(',', $artworkData['panorama_ids']);
                } else {
                    $panorama_img = [];
                }
                if (!empty($artworkData['topography_ids'])) {
                    $num += 1;
                    $topography_img = explode(',', $artworkData['topography_ids']);
                } else {
                    $topography_img = [];
                }
                if ($artworkData['category'] != -1 || !empty($c)) {
                    //$num += 1;
                    /*if(!empty($artworkData['category']) && $artworkData['category']!='10'){
                        $res = M('ArtworkCategory')->where(['id'=>$artworkData['category']])->getField('cn_name');
                        $category = empty($res)? "":$res;
                    }else{
                        $category = empty($c['cn_name'])?'':$c['cn_name'];
                    }*/
                    $category = empty($c['cn_name']) ? '' : $c['cn_name'];//直接取自定义表
                } else {
                    $category = '';
                }
                if (!empty($artworkData['subject_ids']) || !empty($s)) {
                    //$num += 1;
                    $subject = !empty($artworkData['subject_ids']) ? $artworkData['subject_ids'] : $s['cn_name'];
                } else {
                    $subject = '';
                }
                if (!empty($artworkData['style_ids']) || !empty($s2)) {
                    //$num += 1;
                    $style = !empty($artworkData['style_ids']) ? $artworkData['style_ids'] : $s2['cn_name'];
                } else {
                    $style = '';
                }
                if (!empty($c) || !empty($s) || !empty($s2) || !empty($artworkData['category']) || !empty($artworkData['subject_ids']) || !empty($artworkData['style_ids'])) {
                    $num += 1;
                }
                if (!empty($artworkData['story'])) {
                    $num += 1;
                }
                $percent = round($num / 8 * 100); //计算百分比
            }

            $list = [
                'name' => $artworkData['name'],  //画作名称
                'state' => $artworkData['state'], //权限 1.所有人可见 2.仅自己可见
                'cover' => trim($artworkData['cover']),
                'color_ids' => empty($color) ? [] : $color, //色调
                'shape' => $artworkData['shape'], //形状 1.方形 2.圆形
                'length' => $artworkData['length'] <= 0 ? '' : trim(floatval($artworkData['length'])), //长
                'width' => $artworkData['width'] <= 0 ? '' : trim(floatval($artworkData['width'])), //宽
                'diameter' => $artworkData['diameter'] <= 0 ? '' : trim(floatval($artworkData['diameter'])), //直径
                'panorama_ids' => empty($panorama_img) ? [] : $panorama_img, //全景图
                'topography_ids' => empty($topography_img) ? [] : $topography_img, //局部图
                'category' => $category, //类别
                'subject' => $subject, //题材
                'style' => $style, //风格
                'story' => empty($artworkData['story']) ? '' : $artworkData['story'], //创作描述
                'is_finished' => $artworkData['is_finished'] //是否完成更新
            ];

            Util::jsonReturn(['status' => 1000, 'info' => $list, 'percent' => $percent]);
        } else {
            Util::jsonReturn(['status' => 1000, 'info' => [], 'percent' => 0]);
        }
    }

    //保存创作记录
    public function saveUpdateRecord()
    {

        $this->checkLogin();  //判断用户是否登录
        $tokenInfo = Token::getTokenInfo($this->token);
        $userId = $tokenInfo['userInfo']['id']; //获取登录用户的uid

        $artworkUpdateId = I('post.artworkUpdateId'); //艺术品更新ID
        $draftId = I('post.draftId'); //草稿箱Id

        $wit = I('post.wit'); //创作心路
        $wit = htmlentities($wit, ENT_QUOTES, 'UTF-8'); //创作心路
        $wit = Util::stripHtmlATag($wit); //创作心路
        $wit = Util::cleanSpecific($wit); //创作心路

        $createDate = I('post.createDate'); //创建日期
        /*
        $cover = I('post.cover'); //封面
        $pos = strpos($cover, '?');
        if($pos !==false){
            $cover = substr($cover, 0,$pos);
        }*/

        $artworkTag = I('post.artworkTag');

        //$story = Util::cleanSpecific(I('post.story')); //故事摘要

        $artworkLogic = new ArtworkLogic(); //实例化作品表
        $userLogic = new UserLogic(); //实例化用户表
        $artworkUpdateLogic = new ArtworkUpdateLogic();

        if (empty($artworkUpdateId) && empty($draftId)) {
            Util::jsonReturn(null, Code::SYS_ERR);
        }
        if (!empty($artworkUpdateId)) {
            $ArtworkUpdateinfo = M('ArtworkUpdate')->where("id=" . intval($artworkUpdateId) . " and artist=" . $userId)->find();
            $Artworkinfo = M('Artwork')->where(['id' => intval($ArtworkUpdateinfo['artwork_id']), 'artist' => $userId])->find();
            if (!$ArtworkUpdateinfo || !$Artworkinfo) {
                Util::jsonReturn(null, Code::SYS_ERR);
            }
            if(C('ARTWORK_UPDATE')['EDIT_LOCK_ENABLE']==1&&$_SERVER['REQUEST_TIME'] > $ArtworkUpdateinfo['create_time'] + C('ARTWORK_UPDATE')['EDIT_LOCK_TIME']){
                    Util::jsonReturn(null, Code::SYS_ERR, '已经超过可编辑时间，不能修改');
            }
        } elseif (!empty($draftId)) {
            $ArtworkDraftinfo = M('ArtworkDraft')->where("id=" . intval($draftId) . " and artist_id=" . $userId)->find();
            $Artworkinfo = M('Artwork')->where(['id' => intval($ArtworkDraftinfo['artwork_id']), 'artist' => $userId])->find();
            if (!$ArtworkDraftinfo || !$Artworkinfo) {
                Util::jsonReturn(null, Code::SYS_ERR);
            }
        }

        //判断是否从更新记录进行的编辑操作
        if (!empty($artworkUpdateId)) {
            $artworkId = M('ArtworkUpdate')->where(['id' => $artworkUpdateId])->getField('artwork_id');

            //$updateNumber = $artworkLogic->getUpdateNumber($artworkId); //获取某艺术品更新次数
            //$updateNumber++;

            $map['uid'] = $userId;
            $map['artworkid'] = $artworkId;
            $map['type'] = 4;
            $res = M('ArtzheCustom')->where($map)->find();
            if (!empty($artworkTag)) {
                if (empty($res)) {
                    $customData = [
                        'uid' => $userId, //用户ID
                        'artworkid' => $artworkId, //艺术品ID
                        'cn_name' => $artworkTag, //用户自定义标签
                        'type' => 4, //4表示标签
                        'create_time' => time() //添加时间
                    ];
                    M('ArtzheCustom')->add($customData);
                } else {
                    $customData = [
                        'cn_name' => $artworkTag, //用户自定义标签
                    ];
                    $w['id'] = $res['id'];
                    M('ArtzheCustom')->where($w)->save($customData);
                }
            }

            //保存创作记录
            $artworkUpdateData = [
                //'artist'=>$userId, //登录的用户ID(即艺术者ID)
                //'artwork_id'=>$artworkId, //艺术品ID
                //'number'=>$updateNumber, //更新次数
                'wit' => $wit, //创作心路
                //'cover'=>$cover, //封面
                'create_date' => $createDate, //创建日期
                'last_update_time' => time(), //上次更新时间
                //'summary' => $story //摘要
            ];
            //更新画作信息
            $artwrokData = [
                //'cover' => $cover, //封面
                'last_update_time' => time(),
                // 'story' => $story
            ];

            if (trim($Artworkinfo['cover']) == '' && trim($Artworkinfo['panorama_ids']) == '') {//作品没有封面和全局图，抽取内容的第一张图做封面
                preg_match_all('/&lt;img.*?src=&quot;(.*?)&quot;.*?&gt;/is', $wit, $array);
                $first_pic = trim($array[1][0]);
                if ($first_pic != '') {
                    $artwrokData['cover'] = $first_pic;
                }
            }

            //更新作品信息
            $artworkLogic->ArtUpdate($artwrokData, $artworkId);

            $num = $artworkUpdateLogic->update($artworkUpdateId, $artworkUpdateData);
            $insert_Id = $artworkUpdateId;
        } elseif (!empty($draftId)) {//草稿箱编辑保存
            $artworkId = M('ArtworkDraft')->where(['id' => $draftId])->getField('artwork_id');
            M('ArtworkDraft')->delete($draftId);
            $updateNumber = $artworkLogic->getUpdateNumber($artworkId); //获取某艺术品更新次数
            $updateNumber = empty($updateNumber) ? 0 : $updateNumber;
            $updateNumber++;

            $map['uid'] = $userId;
            $map['artworkid'] = $artworkId;
            $map['type'] = 4;
            $res = M('ArtzheCustom')->where($map)->find();
            if (!empty($artworkTag)) {
                if (empty($res)) {
                    $customData = [
                        'uid' => $userId, //用户ID
                        'artworkid' => $artworkId, //艺术品ID
                        'cn_name' => $artworkTag, //用户自定义标签
                        'type' => 4, //4表示标签
                        'create_time' => time() //添加时间
                    ];
                    M('ArtzheCustom')->add($customData);
                } else {
                    $customData = [
                        'cn_name' => $artworkTag, //用户自定义标签
                    ];
                    $w['id'] = $res['id'];
                    M('ArtzheCustom')->where($w)->save($customData);
                }
            }

            //添加创作记录
            $artworkUpdateLogic = new ArtworkUpdateLogic();
            $artworkUpdateData = [
                'artist' => $userId, //登录的用户ID(即艺术者ID)
                'artwork_id' => $artworkId, //艺术品ID
                'number' => $updateNumber, //更新次数
                'wit' => $wit, //创作心路
                //'cover'=>$cover, //封面
                'create_date' => $createDate, //创建日期
                'create_time' => time(), //创建时间
                'last_update_time' => time(), //上次更新时间
                //'summary' => $story //摘要
            ];

            //更新画作信息
            $artwrokData = [
                // 'cover' => $cover, //封面
                'update_times' => $updateNumber, //更新次数
                'last_update_time' => time(),
                // 'story' => $story
            ];

            if (trim($Artworkinfo['cover']) == '' && trim($Artworkinfo['panorama_ids']) == '') {//作品没有封面和全局图，抽取内容的第一张图做封面
                preg_match_all('/&lt;img.*?src=&quot;(.*?)&quot;.*?&gt;/is', $wit, $array);
                $first_pic = trim($array[1][0]);
                if ($first_pic != '') {
                    $artwrokData['cover'] = $first_pic;
                }
            }

            //更新作品信息
            $artworkLogic->ArtUpdate($artwrokData, $artworkId);

            $num = $artworkUpdateLogic->addOne($artworkUpdateData); //添加一条创作记录
            if ($num) {
                $thistime = time();
                $userLogic->where(['id' => $this->loginUserId])->save(['last_add_artupdate_time' => $thistime, 'last_add_artupdate_artid' => $artworkId]);
            }
            $insert_Id = $num;
        }

        $userLogic->where(['id' => $this->loginUserId])->save(['last_update_time' => time()]); //艺术者最后更新作品时间
        $messageLogic = new MessageLogic();
        $messageLogic->artworkUpdate($artworkId);
        $userInfo = M('user')->field('face,nickname,motto')->find($userId);


        $artLogic = new ArtworkLogic();
        $artInfo = $artLogic->where(['id' => intval($Artworkinfo['id']), 'is_deleted' => 'N'])->find();

        //封面图片判断,优先全局图>封面图>内容里面的图
        if (trim($artInfo['panorama_ids']) != '') {
            $images = explode(',', $artInfo['panorama_ids']);
            $cover = $images[0];
        } elseif (trim($artInfo['cover']) != '') {
            $cover = $artInfo['cover'];
        } else {
            preg_match_all('/&lt;img.*?src=&quot;(.*?)&quot;.*?&gt;/is', $wit, $array);
            $first_pic = trim($array[1][0]);
            $cover = $first_pic;
        }


        $share['face'] = Util::getImageResize($userInfo['face'], Image::faceWidth, Image::faceHeight);
        $share['name'] = $userInfo['nickname'];
        $share['category'] = $artworkTag;
        $share['cover'] = trim($cover) == '' ? '' : Util::getImageResize($cover, Image::recommendListWidth, Image::recommendListHeight);
        $share['link'] = C('m_site') . '/artwork/update/' . $insert_Id;
        $share['motto'] = empty($userInfo['motto']) ? "" : $userInfo['motto'];

        //$share['artname'] = $artworkName;
        $resInfo = M('artwork')->field('name')->find($artworkId);

        if (strpos("{$resInfo['name']}", "《") !== false) {
            $artName = $resInfo['name'];
        } else {
            $artName = '《' . $resInfo['name'] . '》';
        }

        if ($num) {
            Util::jsonReturn([
                'status' => 1000,
                'EditLockEnable'=>(int)C('ARTWORK_UPDATE')['EDIT_LOCK_ENABLE'],
                'shareTitle' => "{$userInfo['nickname']}{$artName}更新{$updateNumber}",
                'shareDesc' => html_deconvert_content_cut($wit, 45),
                'shareImg' => Util::getFillImage(Util::getImgUrlById(trim($cover) != '' ? $cover : C('SHARE_IMG_DEFAULT')), Image::faceWidth, Image::faceHeight),
                'shareLink' => C('m_site') . '/artwork/update/' . $insert_Id,
                'shareInfo' => $share
            ]);
        } else {
            Util::jsonReturn(['status' => 1000]);
        }
    }

    //PC端保存画作名字和权限
    public function saveArtistBaseInfo()
    {
        //判断用户是否登录
        $this->checkLogin();

        $tokenInfo = Token::getTokenInfo($this->token);
        $userId = $tokenInfo['userInfo']['id']; //获取登录用户的uid

        $artworkId = I('post.artworkId', '', 'number_int'); //艺术品id
        $artworkName = I('post.artworkName'); //艺术品名称
        $state = I('post.state', 1, 'number_int'); //1.所有人可见 2.仅自己可见

        $baseData = [
            'name' => $artworkName,
            'state' => $state,
        ];

        M('Artwork')->where(['id' => $artworkId, 'artist' => $userId])->save($baseData);
        Util::jsonReturn(['status' => 1000]);
    }


    public function AttributePreview()
    {
        $this->checkLogin();

        $artworkId = I('post.artworkId'); //艺术品id

        $artworkLogic = new ArtworkLogic();
        $userLogic = new UserLogic();

        $artworkResult = $artworkLogic->field('artist,view_total')->where(['id' => intval($artworkId), 'artist' => $this->loginUserId])->find();
        $userResult = $userLogic->field('nickname,face,follower_total,art_total,gender')->where(['id' => intval($artworkResult['artist'])])->find();

        if ($artworkResult && $userResult) {
            $userInfo = [
                'nickname' => trim($userResult['nickname']),
                'face' => Util::getImageResize($userResult['face'], Image::faceWidth, Image::faceHeight),
                'follower_total' => (int)$userResult['follower_total'],
                'art_total' => (int)$userResult['art_total'],
                'gender' => (int)$userResult['gender'],
            ];
            $artworkInfo = [
                'view_total' => (int)$artworkResult['view_total'],
            ];
            $info = [
                'ArtworkInfo' => $artworkInfo,
                'UserInfo' => $userInfo,
            ];
            Util::jsonReturn(['status' => 1000, 'info' => $info]);
        } else {
            Util::jsonReturn(null, Code::SYS_ERR, 'No record');
        }
    }

    public function getAttributeAll()
    {
        $this->checkLogin();
        $artId = I('post.artId', '', 'number_int'); //艺术品id

        $artInfo = M('Artwork')->field('finish_percent,story,color_ids,shape,length,width,diameter,panorama_ids,topography_ids,state,cover')
            ->where(['id' => intval($artId), 'artist' => $this->loginUserId])
            ->find();

        if (!$artInfo) {
            Util::jsonReturn(null, Code::SYS_ERR, 'No record');
        }

        //状态
        $color_status = trim($artInfo['color_ids']) != '' ? 1 : 0;
        $shape_status = $artInfo['shape'] == 1 || $artInfo['shape'] == 2 ? 1 : 0;
        $size_status = 0;
        if ($artInfo['shape'] == 1) {
            $size_status = $artInfo['length'] > 0 && $artInfo['width'] > 0 ? 1 : 0;
        } elseif ($artInfo['shape'] == 2) {
            $size_status = $artInfo['diameter'] > 0 ? 1 : 0;
        }
        //$artzhe_custom = M('artzhe_custom');
        //$artzhe_custom_info = $artzhe_custom->where(['artworkid' => intval($artId)])->find();
        //$tag_status = $artzhe_custom_info ? 1 : 0;

        $story_status = trim($artInfo['story']) != '' ? 1 : 0;
        $panorama_status = trim($artInfo['panorama_ids']) != '' ? 1 : 0;
        $topography_status = trim($artInfo['topography_ids']) != '' ? 1 : 0;
        $cover_status = trim($artInfo['cover']) != '' ? 1 : 0;
        //状态 end


        $artworkModel = M('Artwork'); //实例化艺术者画作表
        $artcusModel = M('ArtzheCustom'); //实例化自定义表

        $artworkData = $artworkModel->field('id,name,state,color_ids,shape,length,width,diameter,panorama_ids,topography_ids,category,subject_ids,style_ids,story')->find($artId);
        $c = $artcusModel->field('cn_name')->where(['artworkid' => $artId, 'type' => '1'])->find();
        $s = $artcusModel->field('cn_name')->where(['artworkid' => $artId, 'type' => '2'])->find();
        $s2 = $artcusModel->field('cn_name')->where(['artworkid' => $artId, 'type' => '3'])->find();

        $num = 0; //统计数
        $percent = 0; //百分比

        //先判断是方形还是圆形
        if (!empty($artworkData)) {
            if (1 == $artworkData['shape']) {
                //方形
                if (!empty($artworkData['name'])) {
                    $num += 1;
                }
                if (!empty($artworkData['state'])) {
                    $num += 1;
                }
                if (!empty($artworkData['color_ids'])) {
                    $num += 1;
                }
                if (intval($artworkData['length']) > 0 && intval($artworkData['width']) > 0) {
                    $num += 1;
                }
                if (!empty($artworkData['panorama_ids'])) {
                    $num += 1;
                }
                if (!empty($artworkData['topography_ids'])) {
                    $num += 1;
                }
                if ($artworkData['category'] != -1 || !empty($c) || !empty($artworkData['subject_ids']) || !empty($s) || !empty($artworkData['style_ids']) || !empty($s2)) {
                    $num += 1;
                }
                if (!empty($artworkData['story'])) {
                    $num += 1;
                }
                $percent = round($num / 8 * 100); //计算百分比
            } else {
                //圆形
                if (!empty($artworkData['name'])) {
                    $num += 1;
                }
                if (!empty($artworkData['state'])) {
                    $num += 1;
                }
                if (!empty($artworkData['color_ids'])) {
                    $num += 1;
                }
                if (floatval($artworkData['diameter']) > 0) {
                    $num += 1;
                }
                if (!empty($artworkData['panorama_ids'])) {
                    $num += 1;
                }
                if (!empty($artworkData['topography_ids'])) {
                    $num += 1;
                }
                if ($artworkData['category'] != -1 || !empty($c) || !empty($artworkData['subject_ids']) || !empty($s) || !empty($artworkData['style_ids']) || !empty($s2)) {
                    $num += 1;
                }
                if (!empty($artworkData['story'])) {
                    $num += 1;
                }
                $percent = round($num / 8 * 100); //计算百分比
            }
        } else {
            $percent = 0;
        }

        $artwork = [
            'percent' => $percent,
            'color_status' => $color_status,
            'shape_status' => $shape_status,
            'size_status' => $size_status,
            'tag_status' => trim($c['cn_name'])!=''||trim($s['cn_name'])!=''||trim($s2['cn_name'])!=''?1:0,
            'story_status' => $story_status,
            'panorama_status' => $panorama_status,
            'topography_status' => $topography_status,
            'cover_status' => $cover_status
        ];
        Util::jsonReturn(['status' => 1000, 'artwork' => $artwork]);
    }

}
